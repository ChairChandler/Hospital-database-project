"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDom = require("react-dom");
var tubular_common_1 = require("tubular-common");
var helpers_1 = require("./helpers");
var createTbOptions = function (tubularOptions) {
    var temp = tubularOptions || {};
    return {
        callbacks: temp.callbacks || {
            onError: function () {
                return;
            },
        },
        componentName: temp.componentName || helpers_1.tbId(),
        deps: temp.deps || null,
        pagination: temp.pagination || {
            itemsPerPage: 10,
            page: 0,
        },
        searchText: temp.searchText || '',
        storage: (temp.componentName && temp.storage) || new tubular_common_1.NullStorage(),
    };
};
exports.useTubular = function (initColumns, source, tubularOptions) {
    var tbOptions = createTbOptions(tubularOptions);
    var componentName = tbOptions.componentName, pagination = tbOptions.pagination, callbacks = tbOptions.callbacks, storage = tbOptions.storage, deps = tbOptions.deps, searchText = tbOptions.searchText;
    var initStorage = storage || new tubular_common_1.NullStorage();
    if (initStorage instanceof tubular_common_1.LocalStorage) {
        initStorage.setGridName(componentName);
    }
    var _a = React.useState(false), isLoading = _a[0], setIsLoading = _a[1];
    var _b = React.useState(initColumns), getColumns = _b[0], setColumns = _b[1];
    var _c = React.useState(false), isStorageLoaded = _c[0], setIsStorageLoaded = _c[1];
    var _d = React.useState(null), getActiveColumn = _d[0], setActiveColumn = _d[1];
    var _e = React.useState(pagination.itemsPerPage || 10), getItemsPerPage = _e[0], setItemsPerPage = _e[1];
    var getStorage = React.useState(initStorage)[0];
    var _f = React.useState(pagination.page || 0), getPage = _f[0], setPage = _f[1];
    var _g = React.useState(searchText || ''), getSearchText = _g[0], setSearchText = _g[1];
    var _h = React.useState(null), getError = _h[0], setError = _h[1];
    var getAllRecords = source instanceof Array ? helpers_1.getLocalDataSource(source) : helpers_1.getRemoteDataSource(source);
    var _j = React.useState({
        aggregate: null,
        data: [],
        filteredRecordCount: 0,
        totalRecordCount: 0,
    }), getState = _j[0], setState = _j[1];
    var api = {
        exportTo: function (allRows, exportFunc) { return __awaiter(void 0, void 0, void 0, function () {
            var payload, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (getState.filteredRecordCount === 0) {
                            return [2 /*return*/];
                        }
                        if (!allRows) return [3 /*break*/, 1];
                        _a = getState.data;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, getAllRecords(new tubular_common_1.GridRequest(getColumns, -1, 0, getSearchText))];
                    case 2:
                        _a = (_b.sent()).payload;
                        _b.label = 3;
                    case 3:
                        payload = _a;
                        exportFunc(payload, getColumns);
                        return [2 /*return*/];
                }
            });
        }); },
        goToPage: function (page) {
            if (getPage !== page) {
                setPage(page);
            }
        },
        handleFilterChange: function (value) {
            setActiveColumn(__assign(__assign({}, getActiveColumn), { filter: __assign(__assign({}, getActiveColumn.filter), value) }));
        },
        processRequest: function () { return __awaiter(void 0, void 0, void 0, function () {
            var request, response_1, maxPage, currentPage_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setIsLoading(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        request = new tubular_common_1.GridRequest(getColumns, getItemsPerPage, getPage, getSearchText);
                        return [4 /*yield*/, getAllRecords(request)];
                    case 2:
                        response_1 = _a.sent();
                        maxPage = Math.ceil(response_1.totalRecordCount / getItemsPerPage);
                        currentPage_1 = response_1.currentPage > maxPage ? maxPage : response_1.currentPage;
                        currentPage_1 = currentPage_1 === 0 ? 0 : currentPage_1 - 1;
                        // TODO: Check this won't case an issue
                        ReactDom.unstable_batchedUpdates(function () {
                            getStorage.setPage(currentPage_1);
                            getStorage.setColumns(getColumns);
                            getStorage.setTextSearch(getSearchText);
                            setState({
                                aggregate: response_1.aggregationPayload,
                                data: response_1.payload,
                                filteredRecordCount: response_1.filteredRecordCount || 0,
                                totalRecordCount: response_1.totalRecordCount || 0,
                            });
                            setIsLoading(false);
                            setError(null);
                            setPage(currentPage_1);
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (callbacks.onError) {
                            callbacks.onError(err_1);
                        }
                        setIsLoading(false);
                        setError(err_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); },
        setActiveColumn: setActiveColumn,
        setFilter: function (value) {
            var columns = __spreadArrays(getColumns);
            var column = columns.find(function (c) { return c.name === getActiveColumn.name; });
            if (!column) {
                return;
            }
            column.filter = __assign(__assign({}, getActiveColumn.filter), value);
            setColumns(__spreadArrays(columns));
        },
        sortColumn: function (property, multiSort) {
            if (multiSort === void 0) { multiSort = false; }
            var columns = tubular_common_1.ColumnModel.sortColumnArray(property, __spreadArrays(getColumns), multiSort);
            setColumns(columns);
        },
        updateItemPerPage: function (itemsPerPage) {
            if (getItemsPerPage !== itemsPerPage) {
                setItemsPerPage(itemsPerPage);
            }
        },
        updateSearchText: function (value) {
            if (getSearchText !== value) {
                setSearchText(value);
            }
        },
    };
    var dependencies = [getColumns, getPage, getSearchText, getItemsPerPage, source];
    if (deps) {
        dependencies = dependencies.concat(deps);
    }
    var initGrid = function () {
        if (getStorage.getPage()) {
            setPage(getStorage.getPage());
        }
        if (getStorage.getTextSearch()) {
            setSearchText(getStorage.getTextSearch());
        }
        var storedColumns = getStorage.getColumns();
        if (storedColumns) {
            var columns_1 = __spreadArrays(getColumns);
            storedColumns.forEach(function (column) {
                var currentColumn = columns_1.find(function (col) { return col.name === column.name; });
                if (!currentColumn) {
                    return;
                }
                currentColumn.visible = column.visible;
                if (currentColumn.filter !== null && currentColumn.filter.text !== null) {
                    return;
                }
                if (column.filter != null &&
                    column.filter.text != null &&
                    column.filter.operator !== tubular_common_1.CompareOperators.None) {
                    currentColumn.filter = column.filter;
                }
            });
            setColumns(columns_1);
        }
        setIsStorageLoaded(true);
    };
    if (!isStorageLoaded) {
        initGrid();
    }
    React.useEffect(function () {
        if (!isLoading) {
            api.processRequest();
        }
    }, dependencies);
    React.useEffect(function () {
        setColumns(initColumns);
    }, [initColumns]);
    var state = __assign(__assign({}, getState), { activeColumn: getActiveColumn, columns: getColumns, error: getError, initialized: isStorageLoaded, isLoading: isLoading, itemsPerPage: getItemsPerPage, page: getPage, searchText: getSearchText, storage: getStorage });
    return { state: state, api: api };
};
