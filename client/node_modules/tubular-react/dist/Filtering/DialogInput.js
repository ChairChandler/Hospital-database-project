"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MenuItem_1 = require("@material-ui/core/MenuItem");
var TextField_1 = require("@material-ui/core/TextField");
var React = require("react");
var tubular_common_1 = require("tubular-common");
var dropdown = {
    marginLeft: '10%',
    marginTop: '5%',
    width: '80%',
};
var BooleanInputOperators = [
    { Value: 'true', Title: 'True' },
    { Value: 'false', Title: 'False' },
];
var ColumnDataTypeToHtmlType = {
    boolean: 'text',
    date: 'date',
    datetime: 'datetime-local',
    datetimeutc: 'datetime-local',
    numeric: 'number',
    string: 'text',
};
var getValue = function (dataType, operator, value, handleTextFieldChange) {
    var isNone = operator === tubular_common_1.CompareOperators.None || operator == 'None';
    switch (dataType) {
        case tubular_common_1.ColumnDataType.Date:
            if (value) {
                return tubular_common_1.formatDate(value, 'yyyy-MM-dd');
            }
            handleTextFieldChange(tubular_common_1.formatDate(new Date().toISOString(), 'YYYY-MM-dd'));
            return '';
        case tubular_common_1.ColumnDataType.DateTime:
        case tubular_common_1.ColumnDataType.DateTimeUtc:
            if (value) {
                return tubular_common_1.formatDate(value, 'yyyy-MM-dd[T]HH:mm');
            }
            handleTextFieldChange(tubular_common_1.formatDate(new Date().toISOString(), 'yyyy-MM-dd[T]HH:mm'));
            return '';
        case tubular_common_1.ColumnDataType.Boolean:
            return isNone ? '' : typeof value === 'boolean' ? (value === true ? 'true' : 'false') : value;
        default:
            return isNone ? '' : value || '';
    }
};
exports.DialogInput = function (_a) {
    var column = _a.column, handleTextFieldChange = _a.handleTextFieldChange, isPrimary = _a.isPrimary;
    var value = getValue(column.dataType, column.filter.operator, isPrimary ? column.filter.text : column.filter.argument[0], handleTextFieldChange) || '';
    var disabled = isPrimary ? column.filter.operator === tubular_common_1.CompareOperators.None : false;
    var label = isPrimary
        ? column.filter.operator !== tubular_common_1.CompareOperators.Between
            ? 'Value'
            : 'First Value'
        : 'Second Value';
    var handleChange = function (_a) {
        var target = _a.target;
        return handleTextFieldChange(target.value);
    };
    return (React.createElement(TextField_1.default, { select: column.dataType === tubular_common_1.ColumnDataType.Boolean, style: dropdown, id: column.name, disabled: disabled, value: value, label: label, type: ColumnDataTypeToHtmlType[column.dataType], onChange: handleChange }, column.dataType === tubular_common_1.ColumnDataType.Boolean &&
        BooleanInputOperators.map(function (option) { return (React.createElement(MenuItem_1.default, { key: option.Value, value: option.Value }, option.Title)); })));
};
