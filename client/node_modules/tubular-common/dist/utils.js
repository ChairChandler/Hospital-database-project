"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uno_js_1 = require("uno-js");
var _1 = require(".");
exports.parsePayload = function (row, columns) {
    return columns.reduce(function (obj, column, key) {
        obj[column.name] = row[key] || row[column.name];
        return obj;
    }, {});
};
exports.formatDate = function (value, formatString) {
    if (formatString === void 0) { formatString = 'M/d/yyyy'; }
    if (!value) {
        return '';
    }
    var parsedValue = uno_js_1.parseISO(value);
    // TODO: Pending format
    return isNaN(parsedValue.getTime()) ? '' : parsedValue.toLocaleDateString();
};
exports.getColumnAlign = function (column) {
    switch (column.dataType) {
        case _1.ColumnDataType.Numeric:
            return 'right';
        case _1.ColumnDataType.Boolean:
            return 'center';
        default:
            return 'inherit';
    }
};
var getCellValue = function (cellDataType, cell) {
    switch (cellDataType) {
        case _1.ColumnDataType.Date:
            return exports.formatDate(cell, 'M/d/yyyy');
        case _1.ColumnDataType.DateTime:
        case _1.ColumnDataType.DateTimeUtc:
            return exports.formatDate(cell, 'M/d/yyyy h:mm a');
        case _1.ColumnDataType.Boolean:
            return cell === true ? 'Yes' : 'No';
        default:
            return (cell || '').toString();
    }
};
var objToArray = function (row) {
    return row instanceof Object ? Object.keys(row).map(function (key) { return row[key]; }) : row;
};
var processRow = function (row, columns, ignoreType) {
    var finalVal = objToArray(row).reduce(function (prev, value, i) {
        if (!columns[i].visible) {
            return;
        }
        var result = getCellValue(ignoreType ? _1.ColumnDataType.String : columns[i].dataType, value).replace(/"/g, '""');
        if (result.search(/("|,|\n)/g) >= 0) {
            result = "\"" + result + "\"";
        }
        return "" + (prev !== undefined ? prev : '') + (i > 0 && prev !== undefined ? ',' : '') + result;
    }, '');
    return finalVal + "\n";
};
exports.getCsv = function (gridResult, columns) {
    return gridResult.reduce(function (prev, row) { return prev + processRow(row, columns, false); }, processRow(columns.map(function (x) { return x.label; }), columns, true));
};
exports.getHtml = function (gridResult, columns) {
    return "<table class=\"table table-bordered table-striped\"><thead><tr>" + columns
        .filter(function (c) { return c.visible; })
        .reduce(function (prev, el) { return prev + "<th>" + (el.label || el.name) + "</th>"; }, '') + "</tr></thead><tbody>" + gridResult.reduce(function (prevRow, row) {
        return prevRow + "<tr>" + objToArray(row).reduce(function (prev, cell, index) {
            return !columns[index].visible ? prev : prev + "<td>" + getCellValue(columns[index].dataType, cell) + "</td>";
        }, '') + "</tr>";
    }, '') + "</tbody></table>";
};
