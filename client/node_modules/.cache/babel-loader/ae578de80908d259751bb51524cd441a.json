{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\nexport default function SQLTable(props) {\n  const _React$useState = React.useState(props.headers),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        headers = _React$useState2[0],\n        setHeaders = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.rows),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rows = _React$useState4[0],\n        setRows = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        clickedRows = _React$useState6[0],\n        setClickedRows = _React$useState6[1];\n\n  let convHeaders = headers.map(({\n    header,\n    label\n  }, colnum) => new ColumnModel(header, {\n    sortable: true,\n    searchable: true\n  }));\n\n  if (props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel(''));\n    setRows(rows.map(val => {\n      val['selected'] = React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n      return val;\n    }));\n  }\n\n  const _React$useState7 = React.useState(convHeaders),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        columns = _React$useState8[0],\n        setColumns = _React$useState8[1];\n\n  const toolbarButton = new ToolbarOptions({\n    customItems: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, props.children)\n  });\n\n  function onRowClick(row) {\n    let copy = Array.from(clickedRows);\n    let indx = clickedRows.findIndex(val => val === row);\n\n    if (indx < 0) {\n      copy.push(row);\n    } else {\n      copy.splice(indx, 1);\n    }\n\n    setClickedRows(copy);\n    props.onRowClick(clickedRows);\n  }\n\n  return React.createElement(DataGrid, {\n    columns: columns,\n    dataSource: rows,\n    gridName: props.title,\n    onRowClick: props.selectRowChecbox ? onRowClick : props.onRowClick,\n    toolbarOptions: toolbarButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","DataGrid","ToolbarOptions","ColumnModel","Checkbox","SQLTable","props","useState","headers","setHeaders","rows","setRows","clickedRows","setClickedRows","convHeaders","map","header","label","colnum","sortable","searchable","selectRowChecbox","push","val","columns","setColumns","toolbarButton","customItems","children","onRowClick","row","copy","Array","from","indx","findIndex","splice","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,eAAzC;AACA,SAASC,WAAT,QAA2B,gBAA3B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA,0BACRN,KAAK,CAACO,QAAN,CAAeD,KAAK,CAACE,OAArB,CADQ;AAAA;AAAA,QAC/BA,OAD+B;AAAA,QACtBC,UADsB;;AAAA,2BAEdT,KAAK,CAACO,QAAN,CAAeD,KAAK,CAACI,IAArB,CAFc;AAAA;AAAA,QAE/BA,IAF+B;AAAA,QAEzBC,OAFyB;;AAAA,2BAGAX,KAAK,CAACO,QAAN,CAAe,EAAf,CAHA;AAAA;AAAA,QAG/BK,WAH+B;AAAA,QAGlBC,cAHkB;;AAKtC,MAAIC,WAAW,GAAGN,OAAO,CAACO,GAAR,CAAY,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,EAAkBC,MAAlB,KAC5B,IAAIf,WAAJ,CAAgBa,MAAhB,EAAwB;AACtBG,IAAAA,QAAQ,EAAE,IADY;AAEtBC,IAAAA,UAAU,EAAE;AAFU,GAAxB,CADgB,CAAlB;;AAMA,MAAGd,KAAK,CAACe,gBAAT,EAA2B;AACzBP,IAAAA,WAAW,CAACQ,IAAZ,CAAiB,IAAInB,WAAJ,CAAgB,EAAhB,CAAjB;AACAQ,IAAAA,OAAO,CAACD,IAAI,CAACK,GAAL,CAASQ,GAAG,IAAI;AACpBA,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlB;AACA,aAAOA,GAAP;AACH,KAHO,CAAD,CAAP;AAID;;AAjBqC,2BAmBRvB,KAAK,CAACO,QAAN,CAAeO,WAAf,CAnBQ;AAAA;AAAA,QAmB/BU,OAnB+B;AAAA,QAmBtBC,UAnBsB;;AAoBtC,QAAMC,aAAa,GAAG,IAAIxB,cAAJ,CAAmB;AACvCyB,IAAAA,WAAW,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMrB,KAAK,CAACsB,QAAZ;AAD0B,GAAnB,CAAtB;;AAMA,WAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,QAAIC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWrB,WAAX,CAAX;AACA,QAAIsB,IAAI,GAAGtB,WAAW,CAACuB,SAAZ,CAAuBZ,GAAD,IAASA,GAAG,KAAKO,GAAvC,CAAX;;AACA,QAAGI,IAAI,GAAG,CAAV,EAAa;AACXH,MAAAA,IAAI,CAACT,IAAL,CAAUQ,GAAV;AACD,KAFD,MAEO;AACLC,MAAAA,IAAI,CAACK,MAAL,CAAYF,IAAZ,EAAkB,CAAlB;AACD;;AACDrB,IAAAA,cAAc,CAACkB,IAAD,CAAd;AACAzB,IAAAA,KAAK,CAACuB,UAAN,CAAiBjB,WAAjB;AACD;;AAED,SACE,oBAAC,QAAD;AACA,IAAA,OAAO,EAAEY,OADT;AAEA,IAAA,UAAU,EAAEd,IAFZ;AAGA,IAAA,QAAQ,EAAEJ,KAAK,CAAC+B,KAHhB;AAIA,IAAA,UAAU,EAAE/B,KAAK,CAACe,gBAAN,GAAyBQ,UAAzB,GAAsCvB,KAAK,CAACuB,UAJxD;AAKA,IAAA,cAAc,EAAEH,aALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel} from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\n\nexport default function SQLTable(props) {\n  const [headers, setHeaders] = React.useState(props.headers)\n  const [rows, setRows] = React.useState(props.rows)\n  const [clickedRows, setClickedRows] = React.useState([])\n\n  let convHeaders = headers.map(({header, label}, colnum) => \n    new ColumnModel(header, {\n      sortable: true,\n      searchable: true\n    }))\n\n  if(props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel(''))\n    setRows(rows.map(val => {\n        val['selected'] = <Checkbox></Checkbox>\n        return val\n    }))\n  }\n\n  const [columns, setColumns] = React.useState(convHeaders)\n  const toolbarButton = new ToolbarOptions({\n    customItems: <div>{props.children}</div>\n  });\n\n\n\n  function onRowClick(row) {\n    let copy = Array.from(clickedRows)\n    let indx = clickedRows.findIndex((val) => val === row)\n    if(indx < 0) {  \n      copy.push(row)\n    } else {\n      copy.splice(indx, 1)\n    }\n    setClickedRows(copy)\n    props.onRowClick(clickedRows)\n  } \n\n  return (\n    <DataGrid\n    columns={columns}\n    dataSource={rows}\n    gridName={props.title}\n    onRowClick={props.selectRowChecbox ? onRowClick : props.onRowClick}\n    toolbarOptions={toolbarButton}\n   />\n  )\n}"]},"metadata":{},"sourceType":"module"}