{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nexport default class DoctorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveData = (tableName, operation) => {\n      this.fetch(operation, null).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      this.clickedRows = rows;\n    };\n\n    this.reload = () => {\n      this.ready = false;\n    };\n\n    this.changeTable = event => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === event.target.value);\n      this.setState(state);\n      this.reload();\n      state.tables[state.selectedTable].get();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: this.changeTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.tables.map(table => React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, table.name))))));\n    };\n\n    this.state = {\n      tables: [{\n        name: 'Karta pacjenta',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards')\n      }, {\n        name: 'Grafik',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Grafik', 'show schedule')\n      }, {\n        name: 'Zabiegi',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Zabiegi', 'show treatments')\n      }],\n      selectedTable: 1,\n      ready: true\n    };\n    alert(JSON.stringify(this.props.user));\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js"],"names":["React","SQLTable","Select","MenuItem","Refresh","DbmsFetch","DoctorPanel","Component","constructor","props","retrieveData","tableName","operation","fetch","then","json","error","alert","state","indx","tables","findIndex","val","name","headers","rows","setState","reload","catch","onRowClick","clickedRows","ready","changeTable","event","selectedTable","table","target","value","get","render","map","bind","JSON","stringify","user","connection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\n\nexport default class DoctorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            tables: [\n                {name: 'Karta pacjenta', headers: [], rows: [], clickedRows: [], get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards')},\n                {name: 'Grafik', headers: [], rows: [], clickedRows: [], get: this.retrieveData.bind(this, 'Grafik', 'show schedule')},\n                {name: 'Zabiegi', headers: [], rows: [], clickedRows: [], get: this.retrieveData.bind(this, 'Zabiegi', 'show treatments')}\n            ],\n            selectedTable: 1,\n            ready: true\n        }\n\n        alert(JSON.stringify(this.props.user))\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n    }\n\n    retrieveData = (tableName, operation) => {\n        this.fetch(operation, null)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    onRowClick = (rows) => {\n        this.clickedRows = rows\n    }\n\n    reload = () => {\n        this.ready = false  \n    }\n\n    changeTable = (event) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === event.target.value)\n        this.setState(state)\n        this.reload()\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows}>\n                        <Select value={this.state.tables[this.state.selectedTable].name} onChange={this.changeTable}>\n                            {this.state.tables.map(table => <MenuItem value={table.name}>{table.name}</MenuItem>)}\n                        </Select>\n                    </SQLTable>\n                </Refresh>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}