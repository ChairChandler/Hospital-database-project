{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nexport default class DirectorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveData = (tableName, operation, dataName, data, functionRetrRemoveCircleOutlineOutlinedIconieveData) => {\n      if (typeof functionRetrieveData === 'function') {\n        data = functionRetrieveData();\n      }\n\n      this.fetch(operation, dataName, data).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          state.clickedRows = [];\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      const state = this.state;\n      state.clickedRows = rows;\n      this.setState(state);\n    };\n\n    this.reload = () => {\n      const state = this.state;\n      state.clickedRows = [];\n      this.setState(state);\n      this.ready = false;\n    };\n\n    this.changeTable = name => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === name);\n      this.setState(state);\n      state.tables[state.selectedTable].get();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n      /*switch(id) {\n          case 'addPatient':\n              if(status === 'done') {\n                  this.addPatient()RemoveCircleOutlineOutlinedIcon\n              }\n          break\n           case 'editPatient':\n              if(status === 'done') {\n                  this.editPatient()\n              }\n          break\n           case 'signTreatment':\n              if(status === 'done') {\n                  this.signTreatment()\n              }\n          break\n           default:\n      }*/\n\n      this.reload();\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: this.state.tables[this.state.selectedTable].selectRowCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, this.state.tables[this.state.selectedTable].name === 'Etaty' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Pracownicy' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].selectable && React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: event => this.changeTable(event.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, this.state.tables.map(table => table.selectable ? React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, table.name) : null)), React.createElement(\"label\", {\n        style: {\n          'text-decoration': 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, this.pesel))), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      clickedRows: [],\n      selectedTable: 1,\n      ready: false,\n      redirect: false\n    };\n    this.dialogs = {\n      'addJobType': {\n        open: false\n      },\n      'editJobType': {\n        open: false\n      },\n      'removeJobType': {\n        open: false\n      },\n      'addEmployee': {\n        open: false\n      },\n      'editEmployee': {\n        open: false\n      },\n      'removeEmployee': {\n        open: false\n      },\n      'addEmployeeSpecialization': {\n        open: false\n      },\n      'addSpecialization': {\n        open: false\n      },\n      'editSpecialization': {\n        open: false\n      },\n      'addTreatmentType': {\n        open: false\n      },\n      'editTreatmentType': {\n        open: false\n      }\n    };\n    this.state['tables'] = [{\n      name: 'Etaty',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Pracownicy',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Specjalizacje lekarza',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', '', null, () => this.state.clickedRows[0].pesel),\n      selectable: false,\n      selectRowCheckbox: true,\n      returnsTo: 'Pracownicy'\n    }, {\n      name: 'Lista specjalizacji',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Oferowane zabiegi',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n      selectable: true,\n      selectRowCheckbox: true\n    }];\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    this.state.tables[this.state.selectedTable].get();\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js"],"names":["React","SQLTable","Select","MenuItem","IconButton","Refresh","DbmsFetch","Redirect","KeyboardBackspaceOutlinedIcon","AddOutlinedIcon","EditOutlinedIcon","InfoOutlinedIcon","RemoveCircleOutlineOutlinedIcon","DirectorPanel","Component","constructor","props","retrieveData","tableName","operation","dataName","data","functionRetrRemoveCircleOutlineOutlinedIconieveData","functionRetrieveData","fetch","then","json","error","alert","state","indx","tables","findIndex","val","name","headers","rows","clickedRows","setState","reload","catch","onRowClick","ready","changeTable","selectedTable","table","get","closeDialog","id","status","dialogs","open","openDialog","forceUpdate","render","selectRowCheckbox","bind","length","selectable","event","target","value","map","pesel","redirect","returnsTo","connection","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\n\nexport default class DirectorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            clickedRows: [],\n            selectedTable: 1,\n            ready: false,\n            redirect: false\n        }\n        this.dialogs = {\n            'addJobType': {\n                open: false\n            },\n            'editJobType': {\n                open: false\n            },\n            'removeJobType': {\n                open: false\n            },\n            'addEmployee': {\n                open: false\n            },\n            'editEmployee': {\n                open: false\n            },\n            'removeEmployee': {\n                open: false\n            },\n            'addEmployeeSpecialization': {\n                open: false\n            },\n            'addSpecialization': {\n                open: false\n            },\n            'editSpecialization': {\n                open: false\n            },\n            'addTreatmentType': {\n                open: false\n            },\n            'editTreatmentType': {\n                open: false\n            }\n        }\n        this.state['tables'] = [\n                {\n                    name: 'Etaty', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Pracownicy', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Specjalizacje lekarza', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', '', null, () => this.state.clickedRows[0].pesel),\n                    selectable: false,\n                    selectRowCheckbox: true,\n                    returnsTo: 'Pracownicy'\n                },\n                {\n                    name: 'Lista specjalizacji', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Oferowane zabiegi', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                }\n            ]\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        this.state.tables[this.state.selectedTable].get()\n    }\n\n    retrieveData = (tableName, operation, dataName, data, functionRetrRemoveCircleOutlineOutlinedIconieveData) => {\n        if(typeof functionRetrieveData === 'function') {\n            data = functionRetrieveData()\n        }\n        \n        this.fetch(operation, dataName, data)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                state.clickedRows = []\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    onRowClick = (rows) => {\n        const state = this.state\n        state.clickedRows = rows\n        this.setState(state)\n    }\n\n    reload = () => {\n        const state = this.state\n        state.clickedRows = []\n        this.setState(state)\n        this.ready = false  \n    }\n\n    changeTable = (name) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === name)\n        this.setState(state)\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n        /*switch(id) {\n            case 'addPatient':\n                if(status === 'done') {\n                    this.addPatient()RemoveCircleOutlineOutlinedIcon\n                }\n            break\n\n            case 'editPatient':\n                if(status === 'done') {\n                    this.editPatient()\n                }\n            break\n\n            case 'signTreatment':\n                if(status === 'done') {\n                    this.signTreatment()\n                }\n            break\n\n            default:\n        }*/\n        \n        this.reload()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows} onRowClick={this.onRowClick} \n                    selectRowChecbox={this.state.tables[this.state.selectedTable].selectRowCheckbox}>\n                        \n\n                        {this.state.tables[this.state.selectedTable].name === 'Etaty' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Pracownicy' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].selectable && (\n                            <Select value={this.state.tables[this.state.selectedTable].name} onChange={(event) => this.changeTable(event.target.value)}>\n                                {this.state.tables.map(table => table.selectable ? <MenuItem value={table.name}>{table.name}</MenuItem> : null)}\n                            </Select>\n                        )}\n                        <label style={{'text-decoration': 'underline'}}>{this.pesel}</label> \n                    </SQLTable>\n                </Refresh>\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}