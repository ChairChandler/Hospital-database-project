{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\nimport { createRenderer } from 'react-dom/test-utils';\nexport default class SQLTable extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onRowClick = row => {\n      let clickedRowsCopy = Array.from(clickedRows);\n      let indx = clickedRows.findIndex(val => val.rownum === row.rownum);\n\n      if (indx < 0) {\n        clickedRowsCopy.push(row);\n        let rowsCopy = Array.from(rows);\n\n        rowsCopy[row.rownum].selected = () => React.createElement(Checkbox, {\n          checked: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n\n        setRows(rowsCopy);\n      } else {\n        clickedRowsCopy.splice(indx, 1);\n      }\n\n      setClickedRows(clickedRowsCopy);\n      props.onRowClick(clickedRowsCopy);\n    };\n\n    this.renderer = () => {\n      return React.createElement(DataGrid, {\n        columns: this.columns,\n        dataSource: this.rows,\n        gridName: this.props.title,\n        onRowClick: this.props.selectRowChecbox ? this.onRowClick : props.onRowClick,\n        toolbarOptions: this.toolbarButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    };\n\n    this.clickedRows = []; //headers\n\n    this.columns = _props.headers.map(({\n      header,\n      label\n    }, colnum) => new ColumnModel(header, {\n      sortable: true,\n      searchable: true\n    }));\n    this.columns.push(new ColumnModel('rownum', {\n      visible: false,\n      isKey: true\n    })); //rows\n\n    if (_props.selectRowChecbox) {\n      this.columns.push(new ColumnModel('selected', {\n        label: ' '\n      }));\n      this.rows = _props.rows.map((val, indx) => {\n        val['selected'] = React.createElement(Checkbox, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n        val['rownum'] = indx;\n        return val;\n      });\n    } else {\n      this.rows = _props.rows.map((val, indx) => {\n        val['rownum'] = indx;\n        return val;\n      });\n    } //buttons\n\n\n    this.toolbarButton = new ToolbarOptions({\n      customItems: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, _props.children)\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","DataGrid","ToolbarOptions","ColumnModel","Checkbox","createRenderer","SQLTable","Component","constructor","props","onRowClick","row","clickedRowsCopy","Array","from","clickedRows","indx","findIndex","val","rownum","push","rowsCopy","rows","selected","setRows","splice","setClickedRows","renderer","columns","title","selectRowChecbox","toolbarButton","headers","map","header","label","colnum","sortable","searchable","visible","isKey","customItems","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel} from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\nimport { createRenderer } from 'react-dom/test-utils';\n\nexport default class SQLTable extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.clickedRows = []\n\n    //headers\n    this.columns = props.headers.map(({header, label}, colnum) => \n    new ColumnModel(header, {\n      sortable: true,\n      searchable: true\n    }))\n    this.columns.push(new ColumnModel('rownum', {\n      visible: false,\n      isKey: true\n    }))\n\n    //rows\n    if(props.selectRowChecbox) {\n      this.columns.push(new ColumnModel('selected', {label: ' '}))\n      this.rows = props.rows.map((val, indx) => {\n          val['selected'] = <Checkbox></Checkbox>\n          val['rownum'] = indx\n          return val\n      })\n    } else {\n      this.rows = props.rows.map((val, indx) => {\n        val['rownum'] = indx\n        return val\n      })\n    }\n\n    //buttons\n    this.toolbarButton = new ToolbarOptions({\n      customItems: <div>{props.children}</div>\n    });\n  }\n\n  onRowClick = (row) => {\n    let clickedRowsCopy = Array.from(clickedRows)\n    let indx = clickedRows.findIndex((val) => val.rownum === row.rownum)\n    if(indx < 0) {  \n      clickedRowsCopy.push(row)\n      let rowsCopy = Array.from(rows)\n      rowsCopy[row.rownum].selected = () => <Checkbox checked={true}></Checkbox>\n      setRows(rowsCopy)\n\n    } else {\n      clickedRowsCopy.splice(indx, 1)\n    }\n    setClickedRows(clickedRowsCopy)\n    props.onRowClick(clickedRowsCopy)\n  } \n\n  renderer = () => {\n    return (\n      <DataGrid\n      columns={this.columns}\n      dataSource={this.rows}\n      gridName={this.props.title}\n      onRowClick={this.props.selectRowChecbox ? this.onRowClick : props.onRowClick}\n      toolbarOptions={this.toolbarButton}\n    />\n  )}\n}"]},"metadata":{},"sourceType":"module"}