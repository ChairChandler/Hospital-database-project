{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddJobTypeDialog } from './Dialogs/JobDialogs';\nexport default class DirectorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n      if (typeof functionRetrieveData === 'function') {\n        data = functionRetrieveData();\n      }\n\n      this.fetch(operation, dataName, data).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          state.clickedRows = [];\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addJobType = () => {\n      let data = this.props.user;\n      data['job'] = this.dialogs.addJobType.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add job type',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      const state = this.state;\n      state.clickedRows = rows;\n      this.setState(state);\n    };\n\n    this.reload = () => {\n      const state = this.state;\n      state.clickedRows = [];\n      this.setState(state);\n      this.ready = false;\n    };\n\n    this.changeTable = name => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === name);\n      this.setState(state);\n      state.tables[state.selectedTable].get();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n\n      switch (id) {\n        case 'addJobType':\n          if (status === 'done') {\n            this.addJobType();\n          }\n\n          break;\n\n        default:\n      }\n\n      this.reload();\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: this.state.tables[this.state.selectedTable].selectRowCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, this.state.tables[this.state.selectedTable].name === 'Etaty' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addJobType'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editJobType');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length > 0) this.openDialog('removeJobType');else alert('Wybierz min. 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Pracownicy' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(InfoOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Specjalizacje lekarza' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          this.changeTable(this.state.tables[this.state.selectedTable].returnsTo);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(KeyboardBackspaceOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Lista specjalizacji' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].selectable && React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: event => this.changeTable(event.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, this.state.tables.map(table => table.selectable ? React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, table.name) : null)), React.createElement(\"label\", {\n        style: {\n          'text-decoration': 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, this.pesel))), this.dialogs.addJobType.open && React.createElement(AddJobTypeDialog, {\n        onClose: this.closeDialog.bind(this, 'addJobType'),\n        title: \"Dodaj etat\",\n        setData: data => {\n          this.dialogs.addJobType.data = data;\n        },\n        jobs: this.state.tables[this.state.selectedTable].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      clickedRows: [],\n      selectedTable: 1,\n      ready: false,\n      redirect: false\n    };\n    this.dialogs = {\n      'addJobType': {\n        open: false\n      },\n      'editJobType': {\n        open: false\n      },\n      'removeJobType': {\n        open: false\n      },\n      'addEmployee': {\n        open: false\n      },\n      'editEmployee': {\n        open: false\n      },\n      'removeEmployee': {\n        open: false\n      },\n      'addEmployeeSpecialization': {\n        open: false\n      },\n      'addSpecialization': {\n        open: false\n      },\n      'editSpecialization': {\n        open: false\n      },\n      'addTreatmentType': {\n        open: false\n      },\n      'editTreatmentType': {\n        open: false\n      }\n    };\n    this.state['tables'] = [{\n      name: 'Etaty',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Pracownicy',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Specjalizacje lekarza',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', '', null, () => this.state.clickedRows[0].pesel),\n      selectable: false,\n      selectRowCheckbox: true,\n      returnsTo: 'Pracownicy'\n    }, {\n      name: 'Lista specjalizacji',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Oferowane zabiegi',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n      selectable: true,\n      selectRowCheckbox: true\n    }];\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    this.state.tables[this.state.selectedTable].get();\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js"],"names":["React","SQLTable","Select","MenuItem","IconButton","Refresh","DbmsFetch","Redirect","KeyboardBackspaceOutlinedIcon","AddOutlinedIcon","EditOutlinedIcon","InfoOutlinedIcon","RemoveCircleOutlineOutlinedIcon","AddJobTypeDialog","DirectorPanel","Component","constructor","props","retrieveData","tableName","operation","dataName","data","functionRetrieveData","fetch","then","json","error","alert","state","indx","tables","findIndex","val","name","headers","rows","clickedRows","setState","reload","catch","addJobType","user","dialogs","connection","ip","port","method","body","JSON","stringify","res","selectedTable","get","onRowClick","ready","changeTable","table","closeDialog","id","status","open","openDialog","forceUpdate","render","selectRowCheckbox","bind","length","returnsTo","selectable","event","target","value","map","pesel","redirect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddJobTypeDialog } from './Dialogs/JobDialogs';\n\nexport default class DirectorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            clickedRows: [],\n            selectedTable: 1,\n            ready: false,\n            redirect: false\n        }\n        this.dialogs = {\n            'addJobType': {\n                open: false\n            },\n            'editJobType': {\n                open: false\n            },\n            'removeJobType': {\n                open: false\n            },\n            'addEmployee': {\n                open: false\n            },\n            'editEmployee': {\n                open: false\n            },\n            'removeEmployee': {\n                open: false\n            },\n            'addEmployeeSpecialization': {\n                open: false\n            },\n            'addSpecialization': {\n                open: false\n            },\n            'editSpecialization': {\n                open: false\n            },\n            'addTreatmentType': {\n                open: false\n            },\n            'editTreatmentType': {\n                open: false\n            }\n        }\n        this.state['tables'] = [\n                {\n                    name: 'Etaty', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Pracownicy', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Specjalizacje lekarza', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', '', null, () => this.state.clickedRows[0].pesel),\n                    selectable: false,\n                    selectRowCheckbox: true,\n                    returnsTo: 'Pracownicy'\n                },\n                {\n                    name: 'Lista specjalizacji', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Oferowane zabiegi', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                }\n            ]\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        this.state.tables[this.state.selectedTable].get()\n    }\n\n    retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n        if(typeof functionRetrieveData === 'function') {\n            data = functionRetrieveData()\n        }\n        \n        this.fetch(operation, dataName, data)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                state.clickedRows = []\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    addJobType = () => {\n        let data = this.props.user\n        data['job'] = this.dialogs.addJobType.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add job type',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    onRowClick = (rows) => {\n        const state = this.state\n        state.clickedRows = rows\n        this.setState(state)\n    }\n\n    reload = () => {\n        const state = this.state\n        state.clickedRows = []\n        this.setState(state)\n        this.ready = false  \n    }\n\n    changeTable = (name) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === name)\n        this.setState(state)\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n        switch(id) {\n            case 'addJobType':\n                if(status === 'done') {\n                    this.addJobType()\n                }\n            break\n\n            default:\n        }\n        \n        this.reload()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows} onRowClick={this.onRowClick} \n                    selectRowChecbox={this.state.tables[this.state.selectedTable].selectRowCheckbox}>\n                        \n\n                        {this.state.tables[this.state.selectedTable].name === 'Etaty' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addJobType')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editJobType'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length > 0) this.openDialog('removeJobType'); else alert('Wybierz min. 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Pracownicy' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <InfoOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n                                \n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Specjalizacje lekarza' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {this.changeTable(this.state.tables[this.state.selectedTable].returnsTo)}}>\n                                    <KeyboardBackspaceOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Lista specjalizacji' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].selectable && (\n                            <Select value={this.state.tables[this.state.selectedTable].name} onChange={(event) => this.changeTable(event.target.value)}>\n                                {this.state.tables.map(table => table.selectable ? <MenuItem value={table.name}>{table.name}</MenuItem> : null)}\n                            </Select>\n                        )}\n                        <label style={{'text-decoration': 'underline'}}>{this.pesel}</label> \n                    </SQLTable>\n                </Refresh>\n\n                {this.dialogs.addJobType.open && (\n                    <AddJobTypeDialog onClose={this.closeDialog.bind(this, 'addJobType')} title=\"Dodaj etat\"\n                    setData={(data) => {this.dialogs.addJobType.data = data}} \n                    jobs={this.state.tables[this.state.selectedTable].rows}/>\n                )}\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}