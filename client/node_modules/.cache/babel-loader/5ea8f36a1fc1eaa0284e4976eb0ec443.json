{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/AdminPanel/AdminPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddUserDialog, EditUserDialog, DeleteUserDialog } from './Dialogs';\nexport default class AdminPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reload = () => {\n      this.ready = false;\n      this.forceUpdate();\n      this.getUsers();\n    };\n\n    this.getUsers = () => {\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'show users',\n          data: this.props.user\n        })\n      }).then(res => res.json()).then(json => {\n        this.headers = json.headers;\n        this.rows = json.rows;\n        this.ready = true;\n        this.forceUpdate();\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.getTypes = () => {\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'show types',\n          data: this.props.user\n        })\n      }).then(res => res.json()).then(json => {\n        this.types = json.types;\n        this.forceUpdate();\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addUser = () => {\n      let data = this.props.user;\n      data['user'] = this.dialogs.addUser.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add user',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.editUser = () => {\n      let data = this.props.user;\n      data['user'] = this.dialogs.editUser.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'edit user',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.deleteUsers = () => {\n      let data = this.props.user;\n      data['users'] = this.clickedRows;\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'delete users',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n\n      switch (id) {\n        case 'addUser':\n          if (status === 'done') {\n            this.addUser();\n          }\n\n          break;\n\n        case 'editUser':\n          if (status === 'done') {\n            this.editUser();\n          }\n\n          break;\n\n        case 'deleteUser':\n          if (status === 'delete') {\n            this.deleteUsers();\n          }\n\n          break;\n\n        default:\n      }\n\n      this.forceUpdate();\n    };\n\n    this.onRowClick = rows => {\n      this.clickedRows = rows;\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.headers && this.rows && this.ready && React.createElement(SQLTable, {\n        headers: this.headers,\n        rows: this.rows,\n        title: \"Users\",\n        onRowClick: this.onRowClick,\n        selectRowChecbox: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addUser'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: this.clickedRows.length === 1 ? this.openDialog.bind(this, 'editUser') : () => alert('Select 1 row'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: this.clickedRows.length > 0 ? this.openDialog.bind(this, 'deleteUser') : () => alert('No selected user/s'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }))), React.createElement(AddUserDialog, {\n        isOpen: this.dialogs.addUser.open,\n        onClose: this.closeDialog.bind(this, 'addUser'),\n        title: \"Add user\",\n        types: this.types,\n        setData: data => {\n          this.dialogs.addUser.data = data;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(EditUserDialog, {\n        isOpen: this.dialogs.editUser.open,\n        onClose: this.closeDialog.bind(this, 'editUser'),\n        title: \"Edit user\",\n        types: this.types,\n        setData: data => {\n          this.dialogs.editUser.data = data;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }), React.createElement(DeleteUserDialog, {\n        isOpen: this.dialogs.deleteUser.open,\n        onClose: this.closeDialog.bind(this, 'deleteUser'),\n        title: this.clickedRows.length > 1 ? \"Delete users\" : \"Delete user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }));\n    };\n\n    this.getTypes();\n    this.getUsers();\n    this.clickedRows = [];\n    this.types = [];\n    this.ready = true;\n    this.dialogs = {\n      'addUser': {\n        open: false\n      },\n      'editUser': {\n        open: false\n      },\n      'deleteUser': {\n        open: false\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/AdminPanel/AdminPanel.js"],"names":["React","SQLTable","IconButton","AddOutlinedIcon","EditOutlinedIcon","RemoveCircleOutlineOutlinedIcon","AddUserDialog","EditUserDialog","DeleteUserDialog","AdminPanel","Component","constructor","props","reload","ready","forceUpdate","getUsers","fetch","connection","ip","port","method","headers","body","JSON","stringify","operation","data","user","then","res","json","rows","catch","error","alert","getTypes","types","addUser","dialogs","editUser","deleteUsers","clickedRows","openDialog","id","open","closeDialog","status","onRowClick","render","bind","length","deleteUser"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport {AddUserDialog, EditUserDialog, DeleteUserDialog} from './Dialogs'\n\nexport default class AdminPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.getTypes()\n        this.getUsers()\n        this.clickedRows = []\n        this.types = []\n        this.ready = true\n        this.dialogs = {\n            'addUser': {\n                open: false\n            },\n            'editUser': {\n                open: false\n            },\n            'deleteUser': {\n                open: false\n            }\n        }\n    }\n    \n    reload = () => {\n        this.ready = false\n        this.forceUpdate()\n        this.getUsers()\n    }\n\n    getUsers = () => {\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            operation: 'show users',\n            data: this.props.user\n          })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.headers = json.headers\n            this.rows = json.rows\n            this.ready = true\n            this.forceUpdate()\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    getTypes = () => {\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            operation: 'show types',\n            data: this.props.user\n          })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.types = json.types\n            this.forceUpdate()\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    addUser = () => {\n        let data = this.props.user\n        data['user'] = this.dialogs.addUser.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add user',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    editUser = () => {\n        let data = this.props.user\n        data['user'] = this.dialogs.editUser.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'edit user',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    deleteUsers = () => {\n        let data = this.props.user\n        data['users'] = this.clickedRows\n\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'delete users',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n        switch(id) {\n            case 'addUser':\n                if(status === 'done') {\n                    this.addUser()\n                }\n            break\n\n            case 'editUser':\n                if(status === 'done') {\n                    this.editUser()\n                }\n            break\n\n            case 'deleteUser':\n                if(status === 'delete') {\n                    this.deleteUsers()\n                }\n            break\n\n            default:\n        }\n        \n        this.forceUpdate()\n    }\n\n    onRowClick = (rows) => {\n        this.clickedRows = rows\n    }\n\n    render = () => {\n        return(\n            <div>\n                {this.headers && this.rows && this.ready && (\n                    <SQLTable headers={this.headers} rows={this.rows} title=\"Users\" onRowClick={this.onRowClick} selectRowChecbox='true'>\n                        <IconButton onClick={this.openDialog.bind(this, 'addUser')}>\n                            <AddOutlinedIcon/>\n                        </IconButton>\n\n                        <IconButton onClick={this.clickedRows.length === 1 ? this.openDialog.bind(this, 'editUser'): () => alert('Select 1 row')}>\n                            <EditOutlinedIcon/>\n                        </IconButton>\n                        \n                        <IconButton onClick={this.clickedRows.length > 0 ? this.openDialog.bind(this, 'deleteUser') : () => alert('No selected user/s')}>\n                            <RemoveCircleOutlineOutlinedIcon/>\n                        </IconButton>\n                    </SQLTable>\n                )}\n\n                <AddUserDialog isOpen={this.dialogs.addUser.open} onClose={this.closeDialog.bind(this, 'addUser')} title=\"Add user\"\n                types={this.types} setData={(data) => {this.dialogs.addUser.data = data}}/>\n\n                <EditUserDialog isOpen={this.dialogs.editUser.open} onClose={this.closeDialog.bind(this, 'editUser')} title=\"Edit user\"\n                types={this.types} setData={(data) => {this.dialogs.editUser.data = data}}\n                />\n                \n                <DeleteUserDialog isOpen={this.dialogs.deleteUser.open} onClose={this.closeDialog.bind(this, 'deleteUser')} \n                title={this.clickedRows.length>1 ? \"Delete users\" : \"Delete user\"}/>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}