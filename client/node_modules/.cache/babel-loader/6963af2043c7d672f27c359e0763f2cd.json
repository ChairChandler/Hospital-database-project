{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\nimport { DataGrid } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function SQLTable(props) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(props.headers),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        headers = _React$useState2[0],\n        setHeaders = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.rows),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rows = _React$useState4[0],\n        setRows = _React$useState4[1];\n\n  const _React$useState5 = React.useState(new Set()),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedRows = _React$useState6[0],\n        setSelectedRows = _React$useState6[1];\n\n  setHeaders(headers.map(({\n    header,\n    label\n  }) => new ColumnModel(header)));\n  /*function onSelectRow(rownum) {\n    if(selectedRows.has(rownum)) {\n      selectedRows.delete(rownum)\n    } else {\n      selectedRows.add(rownum)\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n   function onSelectAllRows() {\n    if(selectedRows.size) {\n      selectedRows.clear()\n    } else {\n      rows.forEach((val, indx) => {\n        selectedRows.add(indx)\n      })\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n   return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n      <Typography>123</Typography>\n        <Table stickyHeader aria-label=\"sticky table\" size='small' padding='checkbox'>\n          <TableHead>\n            <TableRow>\n              {headers.map(({header, label}, colnum) => (\n                <TableCell\n                  key={headers}\n                  align='center'\n                >\n                   {!colnum && \n                  (<Checkbox\n                  indeterminate={selectedRows.size > 0 && selectedRows.size < rows.length}\n                  checked={selectedRows.size === rows.length}\n                  onChange={onSelectAllRows}\n                  style={{float: \"left\"}}\n                  inputProps={{ 'aria-label': 'select all desserts' }}\n                  />)}\n                  \n                  <span style={{'fontWeight': 'bold'}}>{label}</span>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rownum) => (\n                <TableRow hover role=\"checkbox\">\n                  {headers.map(({header}, colnum) => (\n                      <TableCell align='center'>\n                         {!colnum && \n                        (<Checkbox\n                        checked={selectedRows.has(rownum)}\n                        onChange={onSelectRow.bind(this, rownum)}\n                        style={{float: \"left\"}}\n                        />)}\n                         {row[header]}\n                      </TableCell>\n                    ))\n                  }\n                </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );*/\n\n  return React.createElement(DataGrid, {\n    columns: headers,\n    dataSource: rows,\n    gridName: \"Grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","Checkbox","TableRow","Typography","DataGrid","ColumnModel","useStyles","root","width","container","maxHeight","SQLTable","props","classes","useState","headers","setHeaders","rows","setRows","Set","selectedRows","setSelectedRows","map","header","label"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAGA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,MAAMC,SAAS,GAAGZ,UAAU,CAAC;AAC3Ba,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GADqB;AAI3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AAJgB,CAAD,CAA5B;AASA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,QAAMC,OAAO,GAAGP,SAAS,EAAzB;;AADsC,0BAERb,KAAK,CAACqB,QAAN,CAAeF,KAAK,CAACG,OAArB,CAFQ;AAAA;AAAA,QAE/BA,OAF+B;AAAA,QAEtBC,UAFsB;;AAAA,2BAGdvB,KAAK,CAACqB,QAAN,CAAeF,KAAK,CAACK,IAArB,CAHc;AAAA;AAAA,QAG/BA,IAH+B;AAAA,QAGzBC,OAHyB;;AAAA,2BAKEzB,KAAK,CAACqB,QAAN,CAAe,IAAIK,GAAJ,EAAf,CALF;AAAA;AAAA,QAK/BC,YAL+B;AAAA,QAKjBC,eALiB;;AAOtCL,EAAAA,UAAU,CAACD,OAAO,CAACO,GAAR,CAAY,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,KAAqB,IAAInB,WAAJ,CAAgBkB,MAAhB,CAAjC,CAAD,CAAV;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,SACE,oBAAC,QAAD;AACA,IAAA,OAAO,EAAER,OADT;AAEA,IAAA,UAAU,EAAEE,IAFZ;AAGA,IAAA,QAAQ,EAAC,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\n\n\nimport { DataGrid } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function SQLTable(props) {\n  const classes = useStyles();\n  const [headers, setHeaders] = React.useState(props.headers)\n  const [rows, setRows] = React.useState(props.rows)\n  \n  const [selectedRows, setSelectedRows] = React.useState(new Set())\n\n  setHeaders(headers.map(({header, label}) => new ColumnModel(header)))\n\n  /*function onSelectRow(rownum) {\n    if(selectedRows.has(rownum)) {\n      selectedRows.delete(rownum)\n    } else {\n      selectedRows.add(rownum)\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  function onSelectAllRows() {\n    if(selectedRows.size) {\n      selectedRows.clear()\n    } else {\n      rows.forEach((val, indx) => {\n        selectedRows.add(indx)\n      })\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n      <Typography>123</Typography>\n        <Table stickyHeader aria-label=\"sticky table\" size='small' padding='checkbox'>\n          <TableHead>\n            <TableRow>\n              {headers.map(({header, label}, colnum) => (\n                <TableCell\n                  key={headers}\n                  align='center'\n                >\n\n                  {!colnum && \n                  (<Checkbox\n                  indeterminate={selectedRows.size > 0 && selectedRows.size < rows.length}\n                  checked={selectedRows.size === rows.length}\n                  onChange={onSelectAllRows}\n                  style={{float: \"left\"}}\n                  inputProps={{ 'aria-label': 'select all desserts' }}\n                  />)}\n                  \n                  <span style={{'fontWeight': 'bold'}}>{label}</span>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rownum) => (\n                <TableRow hover role=\"checkbox\">\n                  {headers.map(({header}, colnum) => (\n                      <TableCell align='center'>\n\n                        {!colnum && \n                        (<Checkbox\n                        checked={selectedRows.has(rownum)}\n                        onChange={onSelectRow.bind(this, rownum)}\n                        style={{float: \"left\"}}\n                        />)}\n\n                        {row[header]}\n                      </TableCell>\n                    ))\n                  }\n                </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );*/\n\n  return (\n    <DataGrid\n    columns={headers}\n    dataSource={rows}\n    gridName='Grid'\n   />\n  )\n}"]},"metadata":{},"sourceType":"module"}