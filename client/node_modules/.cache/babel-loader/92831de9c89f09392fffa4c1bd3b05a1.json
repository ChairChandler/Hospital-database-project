{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ListItem_1 = require(\"@material-ui/core/ListItem\");\n\nvar ListItemText_1 = require(\"@material-ui/core/ListItemText\");\n\nvar React = require(\"react\");\n\nvar react_virtualized_1 = require(\"react-virtualized\");\n\nvar TbListItem_1 = require(\"./TbListItem\");\n\nvar tubular_react_common_1 = require(\"tubular-react-common\");\n\nexports.TbList = function (tbProps) {\n  var tbInstance = tbProps.tbInstance,\n      onItemClick = tbProps.onItemClick,\n      listItemComponent = tbProps.listItemComponent;\n  var _a = tbInstance.state.list,\n      items = _a.items,\n      hasNextPage = _a.hasNextPage;\n\n  var loadNextPage = function (args) {\n    var pageToLoad = Math.ceil(args.stopIndex / (tbInstance.state.itemsPerPage - 1)) - 1;\n\n    if (tbInstance.state.isLoading || pageToLoad <= tbInstance.state.page) {\n      return;\n    }\n\n    tbInstance.api.loadPage(pageToLoad); // We're resolving immediately because tubular will take care of\n    // updating the values once the request is complete.\n\n    return Promise.resolve();\n  }; // This cache is enabling better performance when it comes to reload\n  // previously loaded items.\n\n\n  var cache = new react_virtualized_1.CellMeasurerCache({\n    defaultHeight: 85,\n    fixedWidth: true\n  });\n  var noRecordsFound = !hasNextPage && !tbInstance.state.isLoading && items.length === 0; // We need a place holder to give user some feedback on what's happening\n\n  var itemCount = tbInstance.state.isLoading || noRecordsFound || hasNextPage ? items.length + 1 : items.length;\n  var loadMoreItems = loadNextPage; // Every row is loaded except for our Loading/NoRecordsFound indicator.\n\n  var isItemLoaded = function (index) {\n    return !hasNextPage || index.index < items.length;\n  };\n\n  var ListItemComponent = listItemComponent ? listItemComponent : TbListItem_1.TbListItem;\n\n  var rowRenderer = function (props) {\n    var index = props.index,\n        key = props.key,\n        style = props.style;\n    var row = items[index];\n    var itemClickProxy = tubular_react_common_1.generateOnRowClickProxy(onItemClick)(row);\n    var isPlaceholder = !isItemLoaded({\n      index: index\n    }) || !items[index];\n    var itemToRender = React.createElement(ListItemComponent, {\n      row: row,\n      onItemClick: itemClickProxy,\n      rowStyle: __assign(__assign({}, style), {\n        height: props.height\n      }),\n      columns: tbInstance.state.columns\n    });\n\n    var placeholderItem = function (placeholderStyle) {\n      var placeholderMessage = noRecordsFound ? 'No records found' : 'Loading...';\n      return React.createElement(ListItem_1.default, {\n        button: true,\n        style: placeholderStyle\n      }, React.createElement(ListItemText_1.default, {\n        primary: placeholderMessage\n      }));\n    };\n\n    var content = isPlaceholder ? placeholderItem(style) : itemToRender;\n    return React.createElement(react_virtualized_1.CellMeasurer, {\n      key: key,\n      cache: cache,\n      parent: props.parent,\n      columnIndex: 0,\n      rowIndex: index\n    }, content);\n  };\n\n  return React.createElement(react_virtualized_1.InfiniteLoader, {\n    isRowLoaded: isItemLoaded,\n    loadMoreRows: loadMoreItems,\n    ref: tbInstance.state.infiniteLoaderRef,\n    rowCount: itemCount,\n    threshold: tbInstance.state.itemsPerPage\n  }, function (_a) {\n    var onRowsRendered = _a.onRowsRendered;\n    return React.createElement(react_virtualized_1.AutoSizer, null, function (_a) {\n      var width = _a.width,\n          height = _a.height;\n      return React.createElement(react_virtualized_1.List, {\n        width: width,\n        height: height,\n        deferredMeasurementCache: cache,\n        rowHeight: cache.rowHeight,\n        rowRenderer: rowRenderer,\n        onRowsRendered: onRowsRendered,\n        rowCount: itemCount,\n        overscanRowCount: 1\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/node_modules/tubular-react/dist/TbList/TbList.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","ListItem_1","require","ListItemText_1","React","react_virtualized_1","TbListItem_1","tubular_react_common_1","TbList","tbProps","tbInstance","onItemClick","listItemComponent","_a","state","list","items","hasNextPage","loadNextPage","args","pageToLoad","Math","ceil","stopIndex","itemsPerPage","isLoading","page","api","loadPage","Promise","resolve","cache","CellMeasurerCache","defaultHeight","fixedWidth","noRecordsFound","itemCount","loadMoreItems","isItemLoaded","index","ListItemComponent","TbListItem","rowRenderer","props","key","style","row","itemClickProxy","generateOnRowClickProxy","isPlaceholder","itemToRender","createElement","rowStyle","height","columns","placeholderItem","placeholderStyle","placeholderMessage","default","button","primary","content","CellMeasurer","parent","columnIndex","rowIndex","InfiniteLoader","isRowLoaded","loadMoreRows","ref","infiniteLoaderRef","rowCount","threshold","onRowsRendered","AutoSizer","width","List","deferredMeasurementCache","rowHeight","overscanRowCount"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ListItem_1 = require(\"@material-ui/core/ListItem\");\nvar ListItemText_1 = require(\"@material-ui/core/ListItemText\");\nvar React = require(\"react\");\nvar react_virtualized_1 = require(\"react-virtualized\");\nvar TbListItem_1 = require(\"./TbListItem\");\nvar tubular_react_common_1 = require(\"tubular-react-common\");\nexports.TbList = function (tbProps) {\n    var tbInstance = tbProps.tbInstance, onItemClick = tbProps.onItemClick, listItemComponent = tbProps.listItemComponent;\n    var _a = tbInstance.state.list, items = _a.items, hasNextPage = _a.hasNextPage;\n    var loadNextPage = function (args) {\n        var pageToLoad = Math.ceil(args.stopIndex / (tbInstance.state.itemsPerPage - 1)) - 1;\n        if (tbInstance.state.isLoading || pageToLoad <= tbInstance.state.page) {\n            return;\n        }\n        tbInstance.api.loadPage(pageToLoad);\n        // We're resolving immediately because tubular will take care of\n        // updating the values once the request is complete.\n        return Promise.resolve();\n    };\n    // This cache is enabling better performance when it comes to reload\n    // previously loaded items.\n    var cache = new react_virtualized_1.CellMeasurerCache({ defaultHeight: 85, fixedWidth: true });\n    var noRecordsFound = !hasNextPage && !tbInstance.state.isLoading && items.length === 0;\n    // We need a place holder to give user some feedback on what's happening\n    var itemCount = tbInstance.state.isLoading || noRecordsFound || hasNextPage ? items.length + 1 : items.length;\n    var loadMoreItems = loadNextPage;\n    // Every row is loaded except for our Loading/NoRecordsFound indicator.\n    var isItemLoaded = function (index) { return !hasNextPage || index.index < items.length; };\n    var ListItemComponent = listItemComponent ? listItemComponent : TbListItem_1.TbListItem;\n    var rowRenderer = function (props) {\n        var index = props.index, key = props.key, style = props.style;\n        var row = items[index];\n        var itemClickProxy = tubular_react_common_1.generateOnRowClickProxy(onItemClick)(row);\n        var isPlaceholder = !isItemLoaded({ index: index }) || !items[index];\n        var itemToRender = (React.createElement(ListItemComponent, { row: row, onItemClick: itemClickProxy, rowStyle: __assign(__assign({}, style), { height: props.height }), columns: tbInstance.state.columns }));\n        var placeholderItem = function (placeholderStyle) {\n            var placeholderMessage = noRecordsFound ? 'No records found' : 'Loading...';\n            return (React.createElement(ListItem_1.default, { button: true, style: placeholderStyle },\n                React.createElement(ListItemText_1.default, { primary: placeholderMessage })));\n        };\n        var content = isPlaceholder ? placeholderItem(style) : itemToRender;\n        return (React.createElement(react_virtualized_1.CellMeasurer, { key: key, cache: cache, parent: props.parent, columnIndex: 0, rowIndex: index }, content));\n    };\n    return (React.createElement(react_virtualized_1.InfiniteLoader, { isRowLoaded: isItemLoaded, loadMoreRows: loadMoreItems, ref: tbInstance.state.infiniteLoaderRef, rowCount: itemCount, threshold: tbInstance.state.itemsPerPage }, function (_a) {\n        var onRowsRendered = _a.onRowsRendered;\n        return (React.createElement(react_virtualized_1.AutoSizer, null, function (_a) {\n            var width = _a.width, height = _a.height;\n            return (React.createElement(react_virtualized_1.List, { width: width, height: height, deferredMeasurementCache: cache, rowHeight: cache.rowHeight, rowRenderer: rowRenderer, onRowsRendered: onRowsRendered, rowCount: itemCount, overscanRowCount: 1 }));\n        }));\n    }));\n};\n"]},"metadata":{},"sourceType":"script"}