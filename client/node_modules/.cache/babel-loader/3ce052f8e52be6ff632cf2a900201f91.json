{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/Dialogs/TreatmentDialogs.js\";\nimport React from 'react';\nimport { FormDialog, QuestionDialog } from '../../Shared/Dialog';\nimport { TextField } from '@material-ui/core';\nexport class AddTreatmentTypeDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validate = () => {\n      const treatmentCreate = this.props.treatments.some(treat => treat.typ === this.state.inputs.type_name);\n      return {\n        //true means error\n        errors: {\n          type_name: this.state.inputs.type_name.length === 0 || treatmentCreate\n        },\n        errorsLabel: {\n          type_name: this.state.inputs.type_name.length === 0 ? 'Pusta nazwa zabiegu' : treatmentCreate ? 'Taki zabieg jest juÅ¼ oferowany' : ''\n        }\n      };\n    };\n\n    this.setInputValue = (name, val) => {\n      const state = this.state;\n      state.inputs[name] = val;\n      this.setState(state);\n    };\n\n    this.exit = () => {\n      const state = this.state;\n      state.isCancelled = true;\n      this.setState(state);\n    };\n\n    this.setErrors = (errors, label) => {\n      const state = this.state;\n      state.errors = errors;\n      state.errorsLabel = label;\n      this.setState(state);\n    };\n\n    this.submit = button => {\n      if (button === 'cancel') {\n        this.exit();\n        this.props.onClose(button);\n      } else {\n        const errors = this.validate();\n        const isError = Object.keys(errors.errors).some(key => errors.errors[key]);\n\n        if (isError) {\n          this.setErrors(errors.errors, errors.errorsLabel);\n        } else {\n          this.props.setData(this.state.inputs);\n          this.exit();\n          this.props.onClose(button);\n        }\n      }\n    };\n\n    this.convertTimeToString = time => {\n      let hour = time.getHours().toString();\n      let minutes = time.getMinutes().toString();\n\n      if (hour.length !== 2) {\n        hour = '0' + hour;\n      }\n\n      if (minutes.length !== 2) {\n        minutes = '0' + minutes;\n      }\n\n      return `${hour}:${minutes}`;\n    };\n\n    this.convertStringToTime = string => {\n      const _string$split = string.split(':'),\n            _string$split2 = _slicedToArray(_string$split, 2),\n            h = _string$split2[0],\n            m = _string$split2[1];\n\n      const time = new Date();\n      time.setHours(h, m);\n      return time;\n    };\n\n    this.render = () => {\n      return !this.state.isCancelled && React.createElement(FormDialog, {\n        title: this.props.title,\n        isOpen: true,\n        message: this.props.message,\n        onClose: type => {\n          this.submit(type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        autoFocus: true,\n        required: true,\n        error: this.state.errors.type_name,\n        helperText: this.state.errorsLabel.type_name,\n        margin: \"dense\",\n        id: \"type_name\",\n        label: \"Nazwa zabiegu\",\n        type: \"text\",\n        fullWidth: true,\n        onChange: event => {\n          if (event.target.value !== null) this.setInputValue('type_name', event.target.value);\n        },\n        inputProps: {\n          maxLength: 45\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        style: {\n          \"paddingRight\": '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Cena  \"), React.createElement(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        max: \"1000000\",\n        value: this.state.inputs.payment,\n        onChange: event => {\n          this.setInputValue('price', event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"time\",\n        name: \"duration\",\n        required: true,\n        min: \"00:05\",\n        max: \"10:00\",\n        value: this.convertTimeToString(this.state.inputs.duration),\n        onChange: event => {\n          this.setInputValue('duration', this.convertStringToTime(event.target.value));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n    };\n\n    const _time = new Date();\n\n    _time.setHours(0, 5);\n\n    this.state = {\n      inputs: {\n        type_name: '',\n        price: 0,\n        duration: _time\n      },\n      errors: {\n        type_name: false\n      },\n      errorsLabel: {\n        type_name: ''\n      },\n      isCancelled: false\n    };\n  }\n\n}\nexport const DeleteTreatmentTypeDialog = ({\n  isOpen,\n  title,\n  onClose\n}) => React.createElement(QuestionDialog, {\n  isOpen: isOpen,\n  title: title,\n  question: \"Czy jestes pewny?\",\n  answers: ['cancel', 'delete'],\n  onClose: onClose,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127\n  },\n  __self: this\n});","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/Dialogs/TreatmentDialogs.js"],"names":["React","FormDialog","QuestionDialog","TextField","AddTreatmentTypeDialog","Component","constructor","props","validate","treatmentCreate","treatments","some","treat","typ","state","inputs","type_name","errors","length","errorsLabel","setInputValue","name","val","setState","exit","isCancelled","setErrors","label","submit","button","onClose","isError","Object","keys","key","setData","convertTimeToString","time","hour","getHours","toString","minutes","getMinutes","convertStringToTime","string","split","h","m","Date","setHours","render","title","message","type","event","target","value","maxLength","payment","duration","price","DeleteTreatmentTypeDialog","isOpen"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormDialog, QuestionDialog } from '../../Shared/Dialog';\nimport { TextField } from '@material-ui/core';\n\nexport class AddTreatmentTypeDialog extends React.Component { \n    constructor(props) {\n    super(props)\n    \n    const time = new Date()\n    time.setHours(0, 5)\n\n    this.state = {\n      inputs: {\n        type_name: '',\n        price: 0,\n        duration: time\n      },\n      errors: {\n        type_name: false,\n      },\n      errorsLabel: {\n        type_name: '',\n      },\n      isCancelled: false,\n    } \n  }\n\n  validate = () => {\n    const treatmentCreate = this.props.treatments.some(treat => treat.typ === this.state.inputs.type_name)\n    return { //true means error\n      errors: {\n        type_name: this.state.inputs.type_name.length === 0 || treatmentCreate,\n      },\n      errorsLabel: {\n        type_name: this.state.inputs.type_name.length === 0 ? 'Pusta nazwa zabiegu' : (treatmentCreate ? 'Taki zabieg jest juÅ¼ oferowany' : ''),\n      }\n    }\n  }\n\n  setInputValue = (name, val) => {\n    const state = this.state\n    state.inputs[name] = val\n    this.setState(state)\n  }\n\n  exit = () => {\n    const state = this.state\n    state.isCancelled = true\n    this.setState(state)\n  }\n\n  setErrors = (errors, label) => {\n    const state = this.state\n    state.errors = errors\n    state.errorsLabel = label\n    this.setState(state)\n  }\n\n  submit = (button) => {\n    if(button === 'cancel') {\n      this.exit()\n      this.props.onClose(button)\n    } else {\n      const errors = this.validate()\n      const isError = Object.keys(errors.errors).some(key => errors.errors[key])\n      \n      if(isError) {\n        this.setErrors(errors.errors, errors.errorsLabel)\n      } else {\n        this.props.setData(this.state.inputs)\n        this.exit()\n        this.props.onClose(button)\n      }\n    }\n  }\n\n  convertTimeToString = (time) => {\n      let hour = time.getHours().toString()\n      let minutes = time.getMinutes().toString()\n\n      if(hour.length !== 2) {\n          hour = '0' + hour\n      }\n\n      if(minutes.length !== 2) {\n        minutes = '0' + minutes\n      }\n\n      return `${hour}:${minutes}`\n    }\n\n    convertStringToTime = (string) => {\n        const [h, m] = string.split(':')\n        const time = new Date()\n        time.setHours(h, m)\n        return time\n      }\n\n  render = () => {\n    return !this.state.isCancelled && (\n    <FormDialog title={this.props.title} isOpen={true} message={this.props.message} onClose={(type) => {this.submit(type)}}>\n\n        <TextField\n        autoFocus\n        required\n        error={this.state.errors.type_name}\n        helperText={this.state.errorsLabel.type_name}\n        margin=\"dense\"\n        id=\"type_name\"\n        label=\"Nazwa zabiegu\"\n        type=\"text\"\n        fullWidth\n        onChange={(event) => {if(event.target.value !== null) this.setInputValue('type_name', event.target.value)}}\n        inputProps={{ maxLength: 45 }}\n        />\n\n        <label style={{\"paddingRight\": '5px'}}>Cena  </label>\n        <input type=\"number\" min=\"0\" max=\"1000000\" value={this.state.inputs.payment} onChange={(event) => {this.setInputValue('price', event.target.value)}}/>\n\n        <input type=\"time\" name=\"duration\" required min=\"00:05\" max=\"10:00\" value={this.convertTimeToString(this.state.inputs.duration)} onChange={(event) => {this.setInputValue('duration', this.convertStringToTime(event.target.value))}}></input>\n\n    </FormDialog>\n  )}\n}\n\nexport const DeleteTreatmentTypeDialog = ({isOpen, title, onClose}) =>\n  <QuestionDialog isOpen={isOpen} title={title} question=\"Czy jestes pewny?\" answers={['cancel', 'delete']} onClose={onClose}/>"]},"metadata":{},"sourceType":"module"}