{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/ReceptionPanel/ReceptionPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { AddPatientDialog, EditPatientDialog } from './Dialogs';\nexport default class ReceptionPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPesel = () => {\n      return this.fetch('show pesel').then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          if (json.pesel == null) {\n            alert('Nie skonfigurowano konta pracownika.');\n            const state = this.state;\n            state.redirect = true;\n            this.setState(state);\n          } else {\n            this.pesel.push(json.pesel); //reference to string\n          }\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n      if (typeof functionRetrieveData === 'function') {\n        data = functionRetrieveData();\n      }\n\n      this.fetch(operation, dataName, data).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          state.clickedRows = [];\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addPatient = () => {\n      let data = this.props.user;\n      data['patient'] = this.dialogs.addPatient.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add patient',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.editPatient = () => {\n      let data = this.props.user;\n      data['patient'] = this.dialogs.editPatient.data;\n      data.patient.pesel = this.state.clickedRows[0].pesel;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'edit patient',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      const state = this.state;\n      state.clickedRows = rows;\n      this.setState(state);\n    };\n\n    this.reload = () => {\n      const state = this.state;\n      state.clickedRows = [];\n      this.setState(state);\n      this.ready = false;\n    };\n\n    this.changeTable = name => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === name);\n      this.setState(state);\n      this.reload();\n      state.tables[state.selectedTable].get();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n\n      switch (id) {\n        case 'addPatient':\n          if (status === 'done') {\n            this.addPatient();\n          }\n\n          break;\n\n        case 'editPatient':\n          if (status === 'done') {\n            this.editPatient();\n          }\n\n          break;\n\n        default:\n      }\n\n      this.reload();\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: this.state.tables[this.state.selectedTable].selectRowCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, this.state.tables[this.state.selectedTable].name === 'Kartoteka pacjentów' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addPatient'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editPatient');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) alert('test');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      })), this.state.tables[this.state.selectedTable].name === 'Karta pacjenta' && React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.changeTable('Lekarze prowadzący zabieg');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(InfoOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })), this.state.tables[this.state.selectedTable].name === 'Lekarze prowadzący zabieg' && React.createElement(IconButton, {\n        onClick: () => {\n          this.changeTable(this.state.tables[this.state.selectedTable].returnsTo);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(KeyboardBackspaceOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      })), this.state.tables[this.state.selectedTable].selectable && React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: event => this.changeTable(event.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, this.state.tables.map(table => table.selectable ? React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, table.name) : null)), React.createElement(\"label\", {\n        style: {\n          'text-decoration': 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, this.pesel))), this.dialogs.addPatient.open && React.createElement(AddPatientDialog, {\n        onClose: this.closeDialog.bind(this, 'addPatient'),\n        title: \"Dodaj pacjenta\",\n        setData: data => {\n          data.date_of_birth = data.date_of_birth.toISOString().slice(0, 19).replace('T', ' ');\n          this.dialogs.addPatient.data = data;\n        },\n        users: this.state.tables[this.state.selectedTable].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }), this.dialogs.editPatient.open && React.createElement(EditPatientDialog, {\n        onClose: this.closeDialog.bind(this, 'editPatient'),\n        title: \"Edytuj pacjenta\",\n        setData: data => {\n          data.date_of_birth = data.date_of_birth.toISOString().slice(0, 19).replace('T', ' ');\n\n          if (data.date_of_death) {\n            data.data_date_of_death = data.date_of_death.toISOString().slice(0, 19).replace('T', ' ');\n            alert(data.date_of_death);\n          }\n\n          this.dialogs.editPatient.data = data;\n        },\n        users: this.state.tables[this.state.selectedTable].rows,\n        selectedPatient: this.state.clickedRows[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }));\n    };\n\n    this.pesel = []; //reference to string\n\n    this.state = {\n      clickedRows: [],\n      selectedTable: 1,\n      ready: false,\n      redirect: false\n    };\n    this.dialogs = {\n      'addPatient': {\n        open: false\n      },\n      'editPatient': {\n        open: false\n      }\n    };\n    this.state['tables'] = [{\n      name: 'Karta pacjenta',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Kartoteka pacjentów',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Kartoteka pacjentów', 'show table patients'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Lekarze prowadzący zabieg',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lekarze prowadzący zabieg', 'show assignment doctors', 'id_lekarze_zabieg', null, () => this.state.clickedRows[0].id_lekarze_zabieg),\n      selectable: false,\n      selectRowCheckbox: false,\n      returnsTo: 'Karta pacjenta'\n    }, {\n      name: 'Oferowane zabiegi',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n      selectable: true,\n      selectRowCheckbox: true\n    }];\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    this.getPesel().then(() => {\n      this.state.tables[this.state.selectedTable].get();\n    });\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/ReceptionPanel/ReceptionPanel.js"],"names":["React","SQLTable","Select","MenuItem","IconButton","Refresh","DbmsFetch","Redirect","KeyboardBackspaceOutlinedIcon","AddOutlinedIcon","EditOutlinedIcon","InfoOutlinedIcon","AddPatientDialog","EditPatientDialog","ReceptionPanel","Component","constructor","props","getPesel","fetch","then","json","error","alert","pesel","state","redirect","setState","push","catch","retrieveData","tableName","operation","dataName","data","functionRetrieveData","indx","tables","findIndex","val","name","headers","rows","clickedRows","reload","addPatient","user","dialogs","connection","ip","port","method","body","JSON","stringify","res","selectedTable","get","editPatient","patient","onRowClick","ready","changeTable","table","closeDialog","id","status","open","openDialog","forceUpdate","render","selectRowCheckbox","bind","length","returnsTo","selectable","event","target","value","map","date_of_birth","toISOString","slice","replace","date_of_death","data_date_of_death","id_lekarze_zabieg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { AddPatientDialog, EditPatientDialog } from './Dialogs';\n\nexport default class ReceptionPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.pesel = [] //reference to string\n        this.state = {\n            clickedRows: [],\n            selectedTable: 1,\n            ready: false,\n            redirect: false\n        }\n        this.dialogs = {\n            'addPatient': {\n                open: false\n            },\n            'editPatient': {\n                open: false\n            }\n        }\n        this.state['tables'] = [\n                {\n                    name: 'Karta pacjenta', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Kartoteka pacjentów', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Kartoteka pacjentów', 'show table patients'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Lekarze prowadzący zabieg', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lekarze prowadzący zabieg', 'show assignment doctors', 'id_lekarze_zabieg', null, () => this.state.clickedRows[0].id_lekarze_zabieg),\n                    selectable: false,\n                    selectRowCheckbox: false,\n                    returnsTo: 'Karta pacjenta'\n                },\n                {\n                    name: 'Oferowane zabiegi', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                }\n            ]\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        this.getPesel().then(() => {\n            this.state.tables[this.state.selectedTable].get()\n        })\n    }\n\n    getPesel = () => {\n        return (\n            this.fetch('show pesel')\n            .then(json => {\n                if(json.error) {\n                    alert(json.error)\n                } else {\n                    if(json.pesel == null) {\n                        alert('Nie skonfigurowano konta pracownika.')\n                        const state = this.state\n                        state.redirect = true\n                        this.setState(state)\n                    } else {\n                        this.pesel.push(json.pesel) //reference to string\n                    }\n                }\n            })\n            .catch(error => {\n                alert(error)\n            })\n        )\n    }\n\n    retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n        if(typeof functionRetrieveData === 'function') {\n            data = functionRetrieveData()\n        }\n        \n        this.fetch(operation, dataName, data)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                state.clickedRows = []\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    addPatient = () => {\n        let data = this.props.user\n        data['patient'] = this.dialogs.addPatient.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add patient',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    editPatient = () => {\n        let data = this.props.user\n        data['patient'] = this.dialogs.editPatient.data\n        data.patient.pesel = this.state.clickedRows[0].pesel\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'edit patient',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    onRowClick = (rows) => {\n        const state = this.state\n        state.clickedRows = rows\n        this.setState(state)\n    }\n\n    reload = () => {\n        const state = this.state\n        state.clickedRows = []\n        this.setState(state)\n        this.ready = false  \n    }\n\n    changeTable = (name) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === name)\n        this.setState(state)\n        this.reload()\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n        switch(id) {\n            case 'addPatient':\n                if(status === 'done') {\n                    this.addPatient()\n                }\n            break\n\n            case 'editPatient':\n                if(status === 'done') {\n                    this.editPatient()\n                }\n            break\n\n            default:\n        }\n        \n        this.reload()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows} onRowClick={this.onRowClick} \n                    selectRowChecbox={this.state.tables[this.state.selectedTable].selectRowCheckbox}>\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Kartoteka pacjentów' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addPatient')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n                                \n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editPatient'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && (\n                            <IconButton onClick={() => {if(this.state.clickedRows.length === 1) alert('test'); else alert('Wybierz 1 wiersz')}}>\n                                <AddOutlinedIcon/>\n                            </IconButton>\n                        )}\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Karta pacjenta' && (\n                            <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.changeTable('Lekarze prowadzący zabieg'); else alert('Wybierz 1 wiersz')}}>\n                                <InfoOutlinedIcon/>\n                            </IconButton>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Lekarze prowadzący zabieg' && (\n                            <IconButton onClick={() => {this.changeTable(this.state.tables[this.state.selectedTable].returnsTo)}}>\n                                <KeyboardBackspaceOutlinedIcon/>\n                            </IconButton>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].selectable && (\n                            <Select value={this.state.tables[this.state.selectedTable].name} onChange={(event) => this.changeTable(event.target.value)}>\n                                {this.state.tables.map(table => table.selectable ? <MenuItem value={table.name}>{table.name}</MenuItem> : null)}\n                            </Select>\n                        )}\n                        <label style={{'text-decoration': 'underline'}}>{this.pesel}</label> \n                    </SQLTable>\n                </Refresh>\n\n                {this.dialogs.addPatient.open && (\n                    <AddPatientDialog onClose={this.closeDialog.bind(this, 'addPatient')} title=\"Dodaj pacjenta\"\n                    setData={(data) => {data.date_of_birth = data.date_of_birth.toISOString().slice(0, 19).replace('T', ' '); this.dialogs.addPatient.data = data}} \n                    users={this.state.tables[this.state.selectedTable].rows}/>\n                )}\n\n                {this.dialogs.editPatient.open && (\n                    <EditPatientDialog onClose={this.closeDialog.bind(this, 'editPatient')} title=\"Edytuj pacjenta\"\n                    setData={(data) => {\n                        data.date_of_birth = data.date_of_birth.toISOString().slice(0, 19).replace('T', ' ');\n                        if(data.date_of_death) {\n                            data.data_date_of_death = data.date_of_death.toISOString().slice(0, 19).replace('T', ' ');\n                            alert(data.date_of_death)\n                        }\n                        this.dialogs.editPatient.data = data\n                    }} \n                    users={this.state.tables[this.state.selectedTable].rows}\n                    selectedPatient={this.state.clickedRows[0]}\n                    />\n                )}\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}