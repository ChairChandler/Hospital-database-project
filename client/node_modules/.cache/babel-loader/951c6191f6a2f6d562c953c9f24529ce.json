{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nexport default class DoctorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPesel = () => {\n      this.fetch('show pesel', null, null).then(json => {\n        if (json.error) {\n          alert(json.error);\n          const state = this.state;\n          state.redirect = true;\n          this.setState(state);\n        } else {\n          this.pesel = json.pesel;\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.retrieveData = (tableName, operation) => {\n      this.fetch(operation, null, null).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      this.clickedRows = rows;\n    };\n\n    this.reload = () => {\n      this.ready = false;\n    };\n\n    this.changeTable = event => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === event.target.value);\n      this.setState(state);\n      this.reload();\n      state.tables[state.selectedTable].get();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: this.changeTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.tables.map(table => React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, table.name))))), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      tables: [{\n        name: 'Karta pacjenta',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards')\n      }, {\n        name: 'Grafik',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Grafik', 'show schedule')\n      }, {\n        name: 'Zabiegi',\n        headers: [],\n        rows: [],\n        clickedRows: [],\n        get: this.retrieveData.bind(this, 'Zabiegi', 'show treatments')\n      }],\n      selectedTable: 1,\n      ready: true,\n      redirect: false\n    };\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    this.getPesel();\n    this.state.tables[this.state.selectedTable].get();\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js"],"names":["React","SQLTable","Select","MenuItem","Refresh","DbmsFetch","Redirect","DoctorPanel","Component","constructor","props","getPesel","fetch","then","json","error","alert","state","redirect","setState","pesel","catch","retrieveData","tableName","operation","indx","tables","findIndex","val","name","headers","rows","reload","onRowClick","clickedRows","ready","changeTable","event","selectedTable","table","target","value","get","render","map","bind","connection","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\n\nexport default class DoctorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            tables: [\n                {\n                    name: 'Karta pacjenta', \n                    headers: [], \n                    rows: [], \n                    clickedRows: [], \n                    get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards')\n                },\n                {\n                    name: 'Grafik', \n                    headers: [], \n                    rows: [], \n                    clickedRows: [], \n                    get: this.retrieveData.bind(this, 'Grafik', 'show schedule')\n                },\n                {\n                    name: 'Zabiegi', \n                    headers: [], \n                    rows: [], \n                    clickedRows: [], \n                    get: this.retrieveData.bind(this, 'Zabiegi', 'show treatments')\n                }\n            ],\n            selectedTable: 1,\n            ready: true,\n            redirect: false\n        }\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        this.getPesel()\n        this.state.tables[this.state.selectedTable].get()\n    }\n\n    getPesel = () => {\n        this.fetch('show pesel', null, null)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n                const state = this.state\n                state.redirect = true\n                this.setState(state)\n            } else {\n                this.pesel = json.pesel\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    retrieveData = (tableName, operation) => {\n        this.fetch(operation, null, null)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n\n        })\n    }\n\n    onRowClick = (rows) => {\n        this.clickedRows = rows\n    }\n\n    reload = () => {\n        this.ready = false  \n    }\n\n    changeTable = (event) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === event.target.value)\n        this.setState(state)\n        this.reload()\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows}>\n                        <Select value={this.state.tables[this.state.selectedTable].name} onChange={this.changeTable}>\n                            {this.state.tables.map(table => <MenuItem value={table.name}>{table.name}</MenuItem>)}\n                        </Select>\n                    </SQLTable>\n                </Refresh>\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}