{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\nexport default function SQLTable(props) {\n  const _React$useState = React.useState(props.headers),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        headers = _React$useState2[0],\n        setHeaders = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        clickedRows = _React$useState4[0],\n        setClickedRows = _React$useState4[1]; //headers\n\n\n  let convHeaders = headers.map(({\n    header,\n    label\n  }, colnum) => new ColumnModel(header, {\n    sortable: true,\n    searchable: true\n  }));\n  convHeaders.push(new ColumnModel('rownum', {\n    visible: false,\n    isKey: true\n  })); //rows\n\n  let newRows;\n\n  if (props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel('selected', {\n      label: ' '\n    }));\n    newRows = props.rows.map((val, indx) => {\n      val['selected'] = React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n      val['rownum'] = indx;\n      return val;\n    });\n  } else {\n    newRows = props.rows.map((val, indx) => {\n      val['rownum'] = indx;\n      return val;\n    });\n  }\n\n  const _React$useState5 = React.useState(newRows),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        rows = _React$useState6[0],\n        setRows = _React$useState6[1]; //buttons\n\n\n  const _React$useState7 = React.useState(convHeaders),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        columns = _React$useState8[0],\n        setColumns = _React$useState8[1];\n\n  const toolbarButton = new ToolbarOptions({\n    customItems: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, props.children)\n  });\n\n  function onRowClick(row) {\n    let clickedRowsCopy = Array.from(clickedRows);\n    let indx = clickedRows.findIndex(val => val.rownum === row.rownum);\n\n    if (indx < 0) {\n      clickedRowsCopy.push(row);\n      let rowsCopy = Array.from(rows);\n      rowsCopy[row.rownum].selected = React.createElement(Checkbox, {\n        checked: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n      setRows(rowsCopy);\n    } else {\n      clickedRowsCopy.splice(indx, 1);\n    }\n\n    setClickedRows(clickedRowsCopy);\n    props.onRowClick(clickedRowsCopy);\n  }\n\n  return React.createElement(DataGrid, {\n    columns: columns,\n    dataSource: rows,\n    gridName: props.title,\n    onRowClick: props.selectRowChecbox ? onRowClick : props.onRowClick,\n    toolbarOptions: toolbarButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","DataGrid","ToolbarOptions","ColumnModel","Checkbox","SQLTable","props","useState","headers","setHeaders","clickedRows","setClickedRows","convHeaders","map","header","label","colnum","sortable","searchable","push","visible","isKey","newRows","selectRowChecbox","rows","val","indx","setRows","columns","setColumns","toolbarButton","customItems","children","onRowClick","row","clickedRowsCopy","Array","from","findIndex","rownum","rowsCopy","selected","splice","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel} from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\n\nexport default function SQLTable(props) {\n  const [headers, setHeaders] = React.useState(props.headers)\n  const [clickedRows, setClickedRows] = React.useState([])\n\n  //headers\n  let convHeaders = headers.map(({header, label}, colnum) => \n    new ColumnModel(header, {\n      sortable: true,\n      searchable: true\n    }))\n  convHeaders.push(new ColumnModel('rownum', {\n    visible: false,\n    isKey: true\n  }))\n\n\n  //rows\n  let newRows\n  if(props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel('selected', {label: ' '}))\n    newRows = props.rows.map((val, indx) => {\n        val['selected'] = <Checkbox></Checkbox>\n        val['rownum'] = indx\n        return val\n    })\n  } else {\n    newRows = props.rows.map((val, indx) => {\n      val['rownum'] = indx\n      return val\n    })\n  }\n  const [rows, setRows] = React.useState(newRows)\n\n\n  //buttons\n  const [columns, setColumns] = React.useState(convHeaders)\n  const toolbarButton = new ToolbarOptions({\n    customItems: <div>{props.children}</div>\n  });\n\n\n\n  function onRowClick(row) {\n    let clickedRowsCopy = Array.from(clickedRows)\n    let indx = clickedRows.findIndex((val) => val.rownum === row.rownum)\n    if(indx < 0) {  \n      clickedRowsCopy.push(row)\n      let rowsCopy = Array.from(rows)\n      rowsCopy[row.rownum].selected = <Checkbox checked={true}></Checkbox>\n      setRows(rowsCopy)\n    } else {\n      clickedRowsCopy.splice(indx, 1)\n    }\n    setClickedRows(clickedRowsCopy)\n    props.onRowClick(clickedRowsCopy)\n  } \n\n  return (\n    <DataGrid\n    columns={columns}\n    dataSource={rows}\n    gridName={props.title}\n    onRowClick={props.selectRowChecbox ? onRowClick : props.onRowClick}\n    toolbarOptions={toolbarButton}\n   />\n  )\n}"]},"metadata":{},"sourceType":"module"}