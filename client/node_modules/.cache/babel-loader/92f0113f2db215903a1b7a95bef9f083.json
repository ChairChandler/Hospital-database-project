{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddJobTypeDialog, EditJobTypeDialog, DeleteJobTypeDialog } from './Dialogs/JobDialogs';\nimport { AddEmployeeDialog, DeleteEmployeeDialog } from './Dialogs/EmployeeDialogs';\nimport { AddEmployeeSpecDialog } from './Dialogs/EmployeeSpecDialog';\nimport { AddSpecDialog, EditSpecDialog, DeleteSpecDialog } from './Dialogs/Specialization';\nimport { AddTreatmentTypeDialog } from './Dialogs/TreatmentDialogs';\nexport default class DirectorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n      if (typeof functionRetrieveData === 'function') {\n        data = functionRetrieveData();\n      }\n\n      const table = this.state.tables.find(val => val.name === tableName);\n\n      if (table.needTable) {\n        for (const t of table.needTable) {\n          this.state.tables[t].get();\n        }\n      }\n\n      this.fetch(operation, dataName, data).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          state.clickedRows = [];\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addJobType = () => {\n      let data = this.props.user;\n      data['job'] = this.dialogs.addJobType.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add job type',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.editJobType = () => {\n      let data = this.props.user;\n      data['job'] = this.dialogs.editJobType.data;\n      data.job['prevName'] = this.state.clickedRows[0].nazwa_etatu;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'edit job type',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.deleteJobType = () => {\n      let data = this.props.user;\n      data['jobs'] = this.state.clickedRows;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'delete job type',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addEmployee = () => {\n      let data = this.props.user;\n      data['employee'] = this.dialogs.addEmployee.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add employee',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.deleteEmployee = () => {\n      let data = this.props.user;\n      data['employees'] = this.state.clickedRows;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'delete employee',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addEmployeeSpecialization = () => {\n      let data = this.props.user;\n      data['specialization'] = this.dialogs.addEmployeeSpecialization.data;\n      data.specialization.pesel = this.state.tables[2].selectedRowsPrevTable[0].pesel;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add employee specialization',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addSpecialization = () => {\n      let data = this.props.user;\n      data['specialization'] = this.dialogs.addSpecialization.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add specialization',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.editSpecialization = () => {\n      let data = this.props.user;\n      data['specialization'] = this.dialogs.editSpecialization.data;\n      data.specialization.spec_name = this.state.clickedRows[0].nazwa;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'edit specialization',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.deleteSpecialization = () => {\n      let data = this.props.user;\n      data['specializations'] = this.state.clickedRows;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'delete specialization',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addTreatmentType = () => {\n      let data = this.props.user;\n      data['treatment'] = this.dialogs.addTreatmentType.data;\n      const hour = data.treatment.duration.getHours() + 1 === 24 ? 0 : data.treatment.duration.getHours() + 1;\n      const minutes = data.treatment.duration.getMinutes();\n      data.treatment.duration = `${hour}:${minutes}`;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add treatment type',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.state.tables[this.state.selectedTable].get();\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      const state = this.state;\n      state.clickedRows = rows;\n      this.setState(state);\n    };\n\n    this.reload = () => {\n      const state = this.state;\n      state.clickedRows = [];\n      this.setState(state);\n      this.ready = false;\n    };\n\n    this.changeTable = name => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === name);\n      this.setState(state);\n      state.tables[state.selectedTable].get();\n      this.reload();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n\n      switch (id) {\n        case 'addJobType':\n          if (status === 'done') {\n            this.addJobType();\n          }\n\n          break;\n\n        case 'editJobType':\n          if (status === 'done') {\n            this.editJobType();\n          }\n\n          break;\n\n        case 'deleteJobType':\n          if (status === 'delete') {\n            this.deleteJobType();\n          }\n\n          break;\n\n        case 'addEmployee':\n          if (status === 'done') {\n            this.addEmployee();\n          }\n\n          break;\n\n        case 'deleteEmployee':\n          if (status === 'delete') {\n            this.deleteEmployee();\n          }\n\n          break;\n\n        case 'addEmployeeSpecialization':\n          if (status === 'done') {\n            this.addEmployeeSpecialization();\n          }\n\n          break;\n\n        case 'addSpecialization':\n          if (status === 'done') {\n            this.addSpecialization();\n          }\n\n          break;\n\n        case 'editSpecialization':\n          if (status === 'done') {\n            this.editSpecialization();\n          }\n\n          break;\n\n        case 'deleteSpecialization':\n          if (status === 'delete') {\n            this.deleteSpecialization();\n          }\n\n          break;\n\n        case 'addTreatmentType':\n          if (status === 'done') {\n            this.addTreatmentType();\n          }\n\n          break;\n\n        default:\n      }\n\n      this.reload();\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: this.state.tables[this.state.selectedTable].selectRowCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, this.state.tables[this.state.selectedTable].name === 'Etaty' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addJobType'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editJobType');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length > 0) {\n            if (this.state.clickedRows.filter(val => val.nazwa_etatu === 'lekarz').length > 0) {\n              alert('Nie można usunąć predefiniowanego etatu.');\n            } else {\n              this.openDialog('deleteJobType');\n            }\n          } else alert('Wybierz min. 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Pracownicy' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) {\n            const state = this.state;\n            state.tables[2].selectedRowsPrevTable = this.state.clickedRows;\n            this.setState(state);\n            this.changeTable('Specjalizacje lekarza');\n          } else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668\n        },\n        __self: this\n      }, React.createElement(InfoOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addEmployee'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length > 0) this.openDialog('deleteEmployee');else alert('Wybierz min. 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Specjalizacje lekarza' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addEmployeeSpecialization'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          this.changeTable(this.state.tables[this.state.selectedTable].returnsTo);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694\n        },\n        __self: this\n      }, React.createElement(KeyboardBackspaceOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Lista specjalizacji' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addSpecialization'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.openDialog('editSpecialization');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706\n        },\n        __self: this\n      }, React.createElement(EditOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length) this.openDialog('deleteSpecialization');else alert('Wybierz min. 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.openDialog.bind(this, 'addTreatmentType'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718\n        },\n        __self: this\n      }, React.createElement(AddOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length) this.openDialog('deleteTreatmentType');else alert('Wybierz min. 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722\n        },\n        __self: this\n      }, React.createElement(RemoveCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }))), this.state.tables[this.state.selectedTable].selectable && React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: event => this.changeTable(event.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729\n        },\n        __self: this\n      }, this.state.tables.map(table => table.selectable ? React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730\n        },\n        __self: this\n      }, table.name) : null)), React.createElement(\"label\", {\n        style: {\n          'text-decoration': 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, this.pesel))), this.dialogs.addJobType.open && React.createElement(AddJobTypeDialog, {\n        onClose: this.closeDialog.bind(this, 'addJobType'),\n        title: \"Dodaj etat\",\n        setData: data => {\n          this.dialogs.addJobType.data = data;\n        },\n        jobs: this.state.tables[this.state.selectedTable].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }), this.dialogs.editJobType.open && React.createElement(EditJobTypeDialog, {\n        onClose: this.closeDialog.bind(this, 'editJobType'),\n        title: \"Edytuj etat\",\n        setData: data => {\n          this.dialogs.editJobType.data = data;\n        },\n        selected: this.state.clickedRows[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744\n        },\n        __self: this\n      }), React.createElement(DeleteJobTypeDialog, {\n        isOpen: this.dialogs.deleteJobType.open,\n        onClose: this.closeDialog.bind(this, 'deleteJobType'),\n        title: this.state.clickedRows.length > 1 ? \"Usun etaty\" : \"Usun etat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }), this.dialogs.addEmployee.open && React.createElement(AddEmployeeDialog, {\n        onClose: this.closeDialog.bind(this, 'addEmployee'),\n        title: \"Dodaj pracownika\",\n        setData: data => {\n          data.date_of_employment = data.date_of_employment.toISOString().slice(0, 10);\n          this.dialogs.addEmployee.data = data;\n        },\n        jobsTypes: this.state.tables[0].rows.map(val => val.nazwa_etatu),\n        employees: this.state.tables[1].rows,\n        users: this.state.tables[5].rows.filter(val => !val.pesel),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754\n        },\n        __self: this\n      }), React.createElement(DeleteEmployeeDialog, {\n        isOpen: this.dialogs.deleteEmployee.open,\n        onClose: this.closeDialog.bind(this, 'deleteEmployee'),\n        title: this.state.clickedRows.length > 1 ? \"Usun pracowników\" : \"Usun pracownika\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762\n        },\n        __self: this\n      }), this.dialogs.addEmployeeSpecialization.open && React.createElement(AddEmployeeSpecDialog, {\n        onClose: this.closeDialog.bind(this, 'addEmployeeSpecialization'),\n        title: \"Dodaj specjalizacje\",\n        setData: data => {\n          data.date_of_gain_spec = data.date_of_gain_spec.toISOString().slice(0, 10);\n          this.dialogs.addEmployeeSpecialization.data = data;\n        },\n        specs: this.state.tables[3].rows.filter(x => !this.state.tables[2].rows.find(val => val.nazwa_specjalizacji === x.nazwa)).map(val => val.nazwa),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 766\n        },\n        __self: this\n      }), this.dialogs.addSpecialization.open && React.createElement(AddSpecDialog, {\n        onClose: this.closeDialog.bind(this, 'addSpecialization'),\n        title: \"Dodaj specjalizacje\",\n        setData: data => {\n          this.dialogs.addSpecialization.data = data;\n        },\n        specs: this.state.tables[3].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776\n        },\n        __self: this\n      }), this.dialogs.editSpecialization.open && React.createElement(EditSpecDialog, {\n        onClose: this.closeDialog.bind(this, 'editSpecialization'),\n        title: \"Edytuj p\\u0142ace dodatkow\\u0105\",\n        setData: data => {\n          this.dialogs.editSpecialization.data = data;\n        },\n        selected: this.state.clickedRows[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783\n        },\n        __self: this\n      }), React.createElement(DeleteSpecDialog, {\n        isOpen: this.dialogs.deleteSpecialization.open,\n        onClose: this.closeDialog.bind(this, 'deleteSpecialization'),\n        title: \"Usun specjalizacje\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789\n        },\n        __self: this\n      }), this.dialogs.addTreatmentType.open && React.createElement(AddTreatmentTypeDialog, {\n        onClose: this.closeDialog.bind(this, 'addTreatmentType'),\n        title: \"Dodaj zabieg\",\n        setData: data => {\n          this.dialogs.addTreatmentType.data = data;\n        },\n        treatments: this.state.tables[4].rows,\n        specs: this.state.tables[3].rows,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      clickedRows: [],\n      selectedTable: 1,\n      ready: false,\n      redirect: false\n    };\n    this.dialogs = {\n      'addJobType': {\n        //ok\n        open: false\n      },\n      'editJobType': {\n        //ok\n        open: false\n      },\n      'deleteJobType': {\n        //ok\n        open: false\n      },\n      'addEmployee': {\n        //ok\n        open: false\n      },\n      'deleteEmployee': {\n        //ok\n        open: false\n      },\n      'addEmployeeSpecialization': {\n        //ok\n        open: false\n      },\n      'addSpecialization': {\n        //ok\n        open: false\n      },\n      'editSpecialization': {\n        //ok\n        open: false\n      },\n      'deleteSpecialization': {\n        //ok\n        open: false\n      },\n      'addTreatmentType': {\n        open: false\n      },\n      'deleteTreatmentType': {\n        open: false\n      }\n    };\n    this.state['tables'] = [{\n      name: 'Etaty',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Pracownicy',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n      selectable: true,\n      selectRowCheckbox: true,\n      needTable: [0, 5]\n    }, {\n      name: 'Specjalizacje lekarza',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', 'pesel', null, () => this.state.tables[2].selectedRowsPrevTable[0].pesel),\n      selectable: false,\n      selectRowCheckbox: false,\n      returnsTo: 'Pracownicy',\n      needTable: [3],\n      selectedRowsPrevTable: []\n    }, {\n      name: 'Lista specjalizacji',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Oferowane zabiegi',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n      selectable: true,\n      selectRowCheckbox: true,\n      needTable: [3]\n    }, {\n      name: 'Uzytkownicy',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Uzytkownicy', 'show users')\n    }];\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    const _table = this.state.tables[this.state.selectedTable];\n\n    _table.get();\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/DirectorPanel.js"],"names":["React","SQLTable","Select","MenuItem","IconButton","Refresh","DbmsFetch","Redirect","KeyboardBackspaceOutlinedIcon","AddOutlinedIcon","EditOutlinedIcon","InfoOutlinedIcon","RemoveCircleOutlineOutlinedIcon","AddJobTypeDialog","EditJobTypeDialog","DeleteJobTypeDialog","AddEmployeeDialog","DeleteEmployeeDialog","AddEmployeeSpecDialog","AddSpecDialog","EditSpecDialog","DeleteSpecDialog","AddTreatmentTypeDialog","DirectorPanel","Component","constructor","props","retrieveData","tableName","operation","dataName","data","functionRetrieveData","table","state","tables","find","val","name","needTable","t","get","fetch","then","json","error","alert","indx","findIndex","headers","rows","clickedRows","setState","reload","catch","addJobType","user","dialogs","connection","ip","port","method","body","JSON","stringify","res","selectedTable","editJobType","job","nazwa_etatu","deleteJobType","addEmployee","deleteEmployee","addEmployeeSpecialization","specialization","pesel","selectedRowsPrevTable","addSpecialization","editSpecialization","spec_name","nazwa","deleteSpecialization","addTreatmentType","hour","treatment","duration","getHours","minutes","getMinutes","onRowClick","ready","changeTable","closeDialog","id","status","open","openDialog","forceUpdate","render","selectRowCheckbox","bind","length","filter","returnsTo","selectable","event","target","value","map","date_of_employment","toISOString","slice","date_of_gain_spec","x","nazwa_specjalizacji","redirect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddJobTypeDialog, EditJobTypeDialog, DeleteJobTypeDialog } from './Dialogs/JobDialogs';\nimport { AddEmployeeDialog, DeleteEmployeeDialog } from './Dialogs/EmployeeDialogs';\nimport { AddEmployeeSpecDialog } from './Dialogs/EmployeeSpecDialog';\nimport { AddSpecDialog, EditSpecDialog, DeleteSpecDialog } from './Dialogs/Specialization';\nimport { AddTreatmentTypeDialog } from './Dialogs/TreatmentDialogs';\n\nexport default class DirectorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            clickedRows: [],\n            selectedTable: 1,\n            ready: false,\n            redirect: false\n        }\n        this.dialogs = {\n            'addJobType': { //ok\n                open: false\n            },\n            'editJobType': { //ok\n                open: false\n            },\n            'deleteJobType': { //ok\n                open: false\n            },\n            'addEmployee': { //ok\n                open: false\n            },\n            'deleteEmployee': { //ok\n                open: false\n            },\n            'addEmployeeSpecialization': { //ok\n                open: false\n            },\n            'addSpecialization': { //ok\n                open: false\n            },\n            'editSpecialization': { //ok\n                open: false\n            },\n            'deleteSpecialization': { //ok\n                open: false\n            },\n            'addTreatmentType': {\n                open: false\n            },\n            'deleteTreatmentType': {\n                open: false\n            }\n        }\n        this.state['tables'] = [\n                {\n                    name: 'Etaty', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Etaty', 'show full time'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Pracownicy', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Pracownicy', 'show employee'),\n                    selectable: true,\n                    selectRowCheckbox: true,\n                    needTable: [0, 5]\n                },\n                {\n                    name: 'Specjalizacje lekarza', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Specjalizacje lekarza', 'show doctor specializations', 'pesel', null, () => this.state.tables[2].selectedRowsPrevTable[0].pesel),\n                    selectable: false,\n                    selectRowCheckbox: false,\n                    returnsTo: 'Pracownicy',\n                    needTable: [3],\n                    selectedRowsPrevTable: []\n                },\n                {\n                    name: 'Lista specjalizacji', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lista specjalizacji', 'show specializations'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Oferowane zabiegi', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n                    selectable: true,\n                    selectRowCheckbox: true,\n                    needTable: [3]\n                },\n                {\n                    name: 'Uzytkownicy', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Uzytkownicy', 'show users')\n                },\n            ]\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        const table = this.state.tables[this.state.selectedTable]\n        table.get()\n    }\n\n    retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n        if(typeof functionRetrieveData === 'function') {\n            data = functionRetrieveData()\n        }\n\n        const table = this.state.tables.find(val => val.name === tableName)\n        if(table.needTable) {\n            for(const t of table.needTable) {\n                this.state.tables[t].get()\n            }\n        }\n        \n        this.fetch(operation, dataName, data)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                state.clickedRows = []\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    addJobType = () => {\n        let data = this.props.user\n        data['job'] = this.dialogs.addJobType.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add job type',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    editJobType = () => {\n        let data = this.props.user\n        data['job'] = this.dialogs.editJobType.data\n        data.job['prevName'] = this.state.clickedRows[0].nazwa_etatu\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'edit job type',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    deleteJobType = () => {\n        let data = this.props.user\n        data['jobs'] = this.state.clickedRows\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'delete job type',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    addEmployee = () => {\n        let data = this.props.user\n        data['employee'] = this.dialogs.addEmployee.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add employee',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    deleteEmployee = () => {\n        let data = this.props.user\n        data['employees'] = this.state.clickedRows\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'delete employee',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    addEmployeeSpecialization = () => {\n        let data = this.props.user\n        data['specialization'] = this.dialogs.addEmployeeSpecialization.data\n        data.specialization.pesel = this.state.tables[2].selectedRowsPrevTable[0].pesel\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add employee specialization',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n            alert(error)\n          })\n    }\n\n    addSpecialization = () => {\n        let data = this.props.user\n        data['specialization'] = this.dialogs.addSpecialization.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add specialization',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n            alert(error)\n          })\n    }\n\n    editSpecialization = () => {\n        let data = this.props.user\n        data['specialization'] = this.dialogs.editSpecialization.data\n        data.specialization.spec_name = this.state.clickedRows[0].nazwa\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'edit specialization',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n            alert(error)\n          })\n    }\n\n    deleteSpecialization = () => {\n        let data = this.props.user\n        data['specializations'] = this.state.clickedRows\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'delete specialization',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n            alert(error)\n          })\n    }\n\n    addTreatmentType = () => {\n        let data = this.props.user\n        data['treatment'] = this.dialogs.addTreatmentType.data\n        \n\n        const hour = data.treatment.duration.getHours() + 1 === 24 ? 0 : data.treatment.duration.getHours() + 1\n        const minutes = data.treatment.duration.getMinutes()\n\n        data.treatment.duration = `${hour}:${minutes}`\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add treatment type',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.state.tables[this.state.selectedTable].get()\n                this.reload()\n              }\n          })\n          .catch(error => {\n            alert(error)\n          })\n    }\n\n    onRowClick = (rows) => {\n        const state = this.state\n        state.clickedRows = rows\n        this.setState(state)\n    }\n\n    reload = () => {\n        const state = this.state\n        state.clickedRows = []\n        this.setState(state)\n        this.ready = false  \n    }\n\n    changeTable = (name) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === name)\n        this.setState(state)\n        \n        state.tables[state.selectedTable].get()\n        this.reload()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n\n        switch(id) {\n            case 'addJobType':\n                if(status === 'done') {\n                    this.addJobType()\n                }\n            break\n\n            case 'editJobType':\n                if(status === 'done') {\n                    this.editJobType()\n                }\n            break\n\n            case 'deleteJobType':\n                if(status === 'delete') {\n                    this.deleteJobType()\n                }\n            break\n\n            case 'addEmployee':\n                if(status === 'done') {\n                    this.addEmployee()\n                }\n            break\n\n            case 'deleteEmployee':\n                if(status === 'delete') {\n                    this.deleteEmployee()\n                }\n            break\n\n            case 'addEmployeeSpecialization':\n                if(status === 'done') {\n                    this.addEmployeeSpecialization()\n                }\n            break\n\n            case 'addSpecialization':\n                if(status === 'done') {\n                    this.addSpecialization()\n                }\n            break\n\n            case 'editSpecialization':\n                if(status === 'done') {\n                    this.editSpecialization()\n                }\n            break\n\n            case 'deleteSpecialization':\n                if(status === 'delete') {\n                    this.deleteSpecialization()\n                }\n            break\n\n            case 'addTreatmentType':\n                if(status === 'done') {\n                    this.addTreatmentType()\n                }\n            break\n\n            default:\n        }\n        \n        this.reload()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows} onRowClick={this.onRowClick} \n                    selectRowChecbox={this.state.tables[this.state.selectedTable].selectRowCheckbox}>\n                        \n\n                        {this.state.tables[this.state.selectedTable].name === 'Etaty' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addJobType')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editJobType'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length > 0) { \n                                        if(this.state.clickedRows.filter((val) => val.nazwa_etatu === 'lekarz').length > 0) {\n                                            alert('Nie można usunąć predefiniowanego etatu.')\n                                        } else {\n                                            this.openDialog('deleteJobType')\n                                        }\n                                    }\n                                    else alert('Wybierz min. 1 wiersz')}}>\n                                    \n\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Pracownicy' && (\n                            <span>\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) {\n                                    const state = this.state\n                                    state.tables[2].selectedRowsPrevTable = this.state.clickedRows\n                                    this.setState(state)\n                                    this.changeTable('Specjalizacje lekarza');\n                                    } \n                                    else alert('Wybierz 1 wiersz')}}>\n                                    <InfoOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={this.openDialog.bind(this, 'addEmployee')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length > 0) this.openDialog('deleteEmployee'); else alert('Wybierz min. 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Specjalizacje lekarza' && (\n                            <span>\n                            <IconButton onClick={this.openDialog.bind(this, 'addEmployeeSpecialization')}>\n                                <AddOutlinedIcon/>\n                            </IconButton>\n\n                            <IconButton onClick={() => {this.changeTable(this.state.tables[this.state.selectedTable].returnsTo)}}>\n                                <KeyboardBackspaceOutlinedIcon/>\n                            </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Lista specjalizacji' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addSpecialization')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.openDialog('editSpecialization'); else alert('Wybierz 1 wiersz')}}>\n                                    <EditOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length) this.openDialog('deleteSpecialization'); else alert('Wybierz min. 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].name === 'Oferowane zabiegi' && (\n                            <span>\n                                <IconButton onClick={this.openDialog.bind(this, 'addTreatmentType')}>\n                                    <AddOutlinedIcon/>\n                                </IconButton>\n\n                                <IconButton onClick={() => {if(this.state.clickedRows.length) this.openDialog('deleteTreatmentType'); else alert('Wybierz min. 1 wiersz')}}>\n                                    <RemoveCircleOutlineOutlinedIcon/>\n                                </IconButton>\n                            </span>\n                        )}\n\n                        {this.state.tables[this.state.selectedTable].selectable && (\n                            <Select value={this.state.tables[this.state.selectedTable].name} onChange={(event) => this.changeTable(event.target.value)}>\n                                {this.state.tables.map(table => table.selectable ? <MenuItem value={table.name}>{table.name}</MenuItem> : null)}\n                            </Select>\n                        )}\n                        <label style={{'text-decoration': 'underline'}}>{this.pesel}</label> \n                    </SQLTable>\n                </Refresh>\n\n                {this.dialogs.addJobType.open && (\n                    <AddJobTypeDialog onClose={this.closeDialog.bind(this, 'addJobType')} title=\"Dodaj etat\"\n                    setData={(data) => {this.dialogs.addJobType.data = data}} \n                    jobs={this.state.tables[this.state.selectedTable].rows}/>\n                )}\n\n                {this.dialogs.editJobType.open && (\n                    <EditJobTypeDialog onClose={this.closeDialog.bind(this, 'editJobType')} title=\"Edytuj etat\"\n                    setData={(data) => {this.dialogs.editJobType.data = data}} \n                    selected={this.state.clickedRows[0]}/>\n                )}\n\n                <DeleteJobTypeDialog isOpen={this.dialogs.deleteJobType.open} onClose={this.closeDialog.bind(this, 'deleteJobType')} \n                title={this.state.clickedRows.length>1 ? \"Usun etaty\" : \"Usun etat\"}/>\n\n\n                {this.dialogs.addEmployee.open && (\n                    <AddEmployeeDialog onClose={this.closeDialog.bind(this, 'addEmployee')} title=\"Dodaj pracownika\"\n                    setData={(data) => {data.date_of_employment = data.date_of_employment.toISOString().slice(0, 10); this.dialogs.addEmployee.data = data}} \n                    jobsTypes={this.state.tables[0].rows.map(val => val.nazwa_etatu)}\n                    employees={this.state.tables[1].rows}\n                    users={this.state.tables[5].rows.filter(val => !val.pesel)}\n                    />\n                )}\n\n                <DeleteEmployeeDialog isOpen={this.dialogs.deleteEmployee.open} onClose={this.closeDialog.bind(this, 'deleteEmployee')} \n                title={this.state.clickedRows.length>1 ? \"Usun pracowników\" : \"Usun pracownika\"}/>\n\n                {this.dialogs.addEmployeeSpecialization.open && (\n                    <AddEmployeeSpecDialog onClose={this.closeDialog.bind(this, 'addEmployeeSpecialization')} title=\"Dodaj specjalizacje\"\n                    setData={(data) => {data.date_of_gain_spec = data.date_of_gain_spec.toISOString().slice(0, 10); this.dialogs.addEmployeeSpecialization.data = data}} \n                    specs={\n                    this.state.tables[3].rows.filter(x => \n                    !(this.state.tables[2].rows.find(val => val.nazwa_specjalizacji === x.nazwa))).map(val => val.nazwa)\n                    }\n                    />\n                )}\n\n                {this.dialogs.addSpecialization.open && (\n                    <AddSpecDialog onClose={this.closeDialog.bind(this, 'addSpecialization')} title=\"Dodaj specjalizacje\"\n                    setData={(data) => {this.dialogs.addSpecialization.data = data}} \n                    specs={this.state.tables[3].rows}\n                    />\n                )}\n\n                {this.dialogs.editSpecialization.open && (\n                    <EditSpecDialog onClose={this.closeDialog.bind(this, 'editSpecialization')} title=\"Edytuj płace dodatkową\"\n                    setData={(data) => {this.dialogs.editSpecialization.data = data}} \n                    selected={this.state.clickedRows[0]}\n                    />\n                )}\n                \n                <DeleteSpecDialog isOpen={this.dialogs.deleteSpecialization.open} onClose={this.closeDialog.bind(this, 'deleteSpecialization')} \n                title=\"Usun specjalizacje\"/>\n\n                {this.dialogs.addTreatmentType.open && (\n                    <AddTreatmentTypeDialog onClose={this.closeDialog.bind(this, 'addTreatmentType')} title=\"Dodaj zabieg\"\n                    setData={(data) => {this.dialogs.addTreatmentType.data = data}} \n                    treatments={this.state.tables[4].rows}\n                    specs={this.state.tables[3].rows}\n                    />\n                )}\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}