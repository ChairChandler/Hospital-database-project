{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/ReceptionPanel/ReceptionPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport AccessibleOutlinedIcon from '@material-ui/icons/AccessibleOutlined';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\nexport default class ReceptionPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPesel = () => {\n      return this.fetch('show pesel').then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          if (json.pesel == null) {\n            alert('Nie skonfigurowano konta pracownika.');\n            const state = this.state;\n            state.redirect = true;\n            this.setState(state);\n          } else {\n            this.pesel.push(json.pesel); //reference to string\n          }\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n      if (typeof functionRetrieveData === 'function') {\n        data = functionRetrieveData();\n      }\n\n      this.fetch(operation, dataName, data).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          const state = this.state;\n          const indx = state.tables.findIndex((val, indx) => val.name === tableName);\n          state.tables[indx].headers = json.headers;\n          state.tables[indx].rows = json.rows;\n          this.setState(state);\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.onRowClick = rows => {\n      const state = this.state;\n      state.clickedRows = rows;\n      this.setState(state);\n    };\n\n    this.reload = () => {\n      this.ready = false;\n    };\n\n    this.changeTable = name => {\n      const state = this.state;\n      state.selectedTable = this.state.tables.findIndex(table => table.name === name);\n      this.setState(state);\n      this.reload();\n      state.tables[state.selectedTable].get();\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Refresh, {\n        value: this.state.ready,\n        onRefresh: () => {\n          this.ready = true;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(SQLTable, {\n        headers: this.state.tables[this.state.selectedTable].headers,\n        rows: this.state.tables[this.state.selectedTable].rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: this.state.tables[this.state.selectedTable].selectRowCheckbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.state.tables[this.state.selectedTable].name === 'Karta pacjenta' && React.createElement(IconButton, {\n        onClick: () => {\n          if (this.state.clickedRows.length === 1) this.changeTable('Zabiegi pacjenta');else alert('Wybierz 1 wiersz');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(AccessibleOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), this.state.tables[this.state.selectedTable].name === 'Zabiegi pacjenta' && React.createElement(IconButton, {\n        onClick: () => {\n          this.changeTable(this.state.tables[this.state.selectedTable].returnsTo);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(KeyboardBackspaceOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })), this.state.tables[this.state.selectedTable].selectable && React.createElement(Select, {\n        value: this.state.tables[this.state.selectedTable].name,\n        onChange: event => this.changeTable(event.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, this.state.tables.map(table => table.selectable ? React.createElement(MenuItem, {\n        value: table.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, table.name) : null)), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.pesel))), this.state.redirect && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    };\n\n    this.pesel = []; //reference to string\n\n    this.state = {\n      clickedRows: [],\n      selectedTable: 1,\n      ready: false,\n      redirect: false\n    };\n    this.state['tables'] = [{\n      name: 'Karta pacjenta',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Kartoteka pacjentów',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Kartoteka pacjentów', 'show patients'),\n      selectable: true,\n      selectRowCheckbox: true\n    }, {\n      name: 'Lekarze prowadzący zabieg',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lekarze prowadzący zabieg', 'show assignment doctors', 'id_lekarze_zabieg', null, () => this.state.clickedRows[0].id_lekarze_zabieg),\n      selectable: false,\n      selectRowCheckbox: false,\n      returnsTo: 'Kartoteka pacjentów'\n    }, {\n      name: 'Oferowane zabiegi',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n      selectable: true,\n      selectRowCheckbox: false\n    }, {\n      name: 'Lekarze ze specjalizacją wymaganą do zabiegu',\n      headers: [],\n      rows: [],\n      get: this.retrieveData.bind(this, 'Lekarze ze specjalizacją wymaganą do zabiegu', 'show doctors with needed specialization', null, () => this.state.clickedRows[0].typ),\n      selectable: false,\n      selectRowCheckbox: true,\n      returnsTo: 'Oferowane zabiegi'\n    }];\n    this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch;\n    this.getPesel().then(() => {\n      this.state.tables[this.state.selectedTable].get();\n    });\n  }\n\n  set ready(value) {\n    const state = this.state;\n    state.ready = value;\n    this.setState(state);\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/ReceptionPanel/ReceptionPanel.js"],"names":["React","SQLTable","Select","MenuItem","IconButton","Refresh","DbmsFetch","Redirect","AccessibleOutlinedIcon","KeyboardBackspaceOutlinedIcon","ReceptionPanel","Component","constructor","props","getPesel","fetch","then","json","error","alert","pesel","state","redirect","setState","push","catch","retrieveData","tableName","operation","dataName","data","functionRetrieveData","indx","tables","findIndex","val","name","headers","rows","reload","onRowClick","clickedRows","ready","changeTable","selectedTable","table","get","render","selectRowCheckbox","length","returnsTo","selectable","event","target","value","map","bind","id_lekarze_zabieg","typ","connection","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport { Select, MenuItem, IconButton } from '@material-ui/core';\nimport { Refresh } from '../Shared/Refresh';\nimport DbmsFetch from '../Shared/DbmsFetch';\nimport { Redirect } from 'react-router-dom';\nimport AccessibleOutlinedIcon from '@material-ui/icons/AccessibleOutlined';\nimport KeyboardBackspaceOutlinedIcon from '@material-ui/icons/KeyboardBackspaceOutlined';\n\nexport default class ReceptionPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.pesel = [] //reference to string\n        this.state = {\n            clickedRows: [],\n            selectedTable: 1,\n            ready: false,\n            redirect: false\n        }\n\n        this.state['tables'] = [\n                {\n                    name: 'Karta pacjenta', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Karta pacjenta', 'show patients cards'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Kartoteka pacjentów', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Kartoteka pacjentów', 'show patients'),\n                    selectable: true,\n                    selectRowCheckbox: true\n                },\n                {\n                    name: 'Lekarze prowadzący zabieg', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lekarze prowadzący zabieg', 'show assignment doctors', 'id_lekarze_zabieg', null, () => this.state.clickedRows[0].id_lekarze_zabieg),\n                    selectable: false,\n                    selectRowCheckbox: false,\n                    returnsTo: 'Kartoteka pacjentów'\n                },\n                {\n                    name: 'Oferowane zabiegi', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Oferowane zabiegi', 'show treatments services'),\n                    selectable: true,\n                    selectRowCheckbox: false\n                },\n                {\n                    name: 'Lekarze ze specjalizacją wymaganą do zabiegu', \n                    headers: [], \n                    rows: [], \n                    get: this.retrieveData.bind(this, 'Lekarze ze specjalizacją wymaganą do zabiegu', 'show doctors with needed specialization', null, () => this.state.clickedRows[0].typ),\n                    selectable: false,\n                    selectRowCheckbox: true,\n                    returnsTo: 'Oferowane zabiegi'\n                }\n            ]\n\n        this.fetch = new DbmsFetch(this.props.connection, this.props.user).fetch\n        this.getPesel().then(() => {\n            this.state.tables[this.state.selectedTable].get()\n        })\n    }\n\n    getPesel = () => {\n        return (\n            this.fetch('show pesel')\n            .then(json => {\n                if(json.error) {\n                    alert(json.error)\n                } else {\n                    if(json.pesel == null) {\n                        alert('Nie skonfigurowano konta pracownika.')\n                        const state = this.state\n                        state.redirect = true\n                        this.setState(state)\n                    } else {\n                        this.pesel.push(json.pesel) //reference to string\n                    }\n                }\n            })\n            .catch(error => {\n                alert(error)\n            })\n        )\n    }\n\n    retrieveData = (tableName, operation, dataName, data, functionRetrieveData) => {\n        if(typeof functionRetrieveData === 'function') {\n            data = functionRetrieveData()\n        }\n        \n        this.fetch(operation, dataName, data)\n        .then(json => {\n            if(json.error) {\n                alert(json.error)\n            } else {\n                const state = this.state\n                const indx = state.tables.findIndex((val, indx) => val.name === tableName)\n                state.tables[indx].headers = json.headers\n                state.tables[indx].rows = json.rows\n                this.setState(state)\n                this.reload()\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    onRowClick = (rows) => {\n        const state = this.state\n        state.clickedRows = rows\n        this.setState(state)\n    }\n\n    reload = () => {\n        this.ready = false  \n    }\n\n    changeTable = (name) => {\n        const state = this.state\n        state.selectedTable = this.state.tables.findIndex(table => table.name === name)\n        this.setState(state)\n        this.reload()\n        \n        state.tables[state.selectedTable].get()\n    }\n\n    set ready(value) {\n        const state = this.state\n        state.ready = value \n        this.setState(state) \n    }\n\n    render = () => {\n        return(\n            <div> \n                <Refresh value={this.state.ready} onRefresh={() => {this.ready = true}}>\n                    <SQLTable headers={this.state.tables[this.state.selectedTable].headers} rows={this.state.tables[this.state.selectedTable].rows} onRowClick={this.onRowClick} \n                    selectRowChecbox={this.state.tables[this.state.selectedTable].selectRowCheckbox}>\n                        {this.state.tables[this.state.selectedTable].name === 'Karta pacjenta' && (\n                            <IconButton onClick={() => {if(this.state.clickedRows.length === 1) this.changeTable('Zabiegi pacjenta'); else alert('Wybierz 1 wiersz')}}>\n                                <AccessibleOutlinedIcon/>\n                            </IconButton>\n                        )}\n                        \n                        \n                        {this.state.tables[this.state.selectedTable].name === 'Zabiegi pacjenta' && (\n                            <IconButton onClick={() => {this.changeTable(this.state.tables[this.state.selectedTable].returnsTo)}}>\n                                <KeyboardBackspaceOutlinedIcon/>\n                            </IconButton>\n                        )}\n\n\n                        {this.state.tables[this.state.selectedTable].selectable && (\n                            <Select value={this.state.tables[this.state.selectedTable].name} onChange={(event) => this.changeTable(event.target.value)}>\n                                {this.state.tables.map(table => table.selectable ? <MenuItem value={table.name}>{table.name}</MenuItem> : null)}\n                            </Select>\n                        )}\n                        <label>{this.pesel}</label> \n                    </SQLTable>\n                </Refresh>\n\n                {this.state.redirect && (<Redirect to='/login'/>)}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}