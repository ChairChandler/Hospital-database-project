{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TableCell_1 = require(\"@material-ui/core/TableCell\");\n\nvar CheckBox_1 = require(\"@material-ui/icons/CheckBox\");\n\nvar CheckBoxOutlineBlank_1 = require(\"@material-ui/icons/CheckBoxOutlineBlank\");\n\nvar React = require(\"react\");\n\nvar tubular_common_1 = require(\"tubular-common\");\n\nexports.renderCellContent = function (column, row) {\n  switch (column.dataType) {\n    case tubular_common_1.ColumnDataType.Numeric:\n      return row[column.name] || 0;\n\n    case tubular_common_1.ColumnDataType.Date:\n      return tubular_common_1.formatDate(row[column.name]);\n\n    case tubular_common_1.ColumnDataType.DateTime:\n    case tubular_common_1.ColumnDataType.DateTimeUtc:\n      return tubular_common_1.formatDate(row[column.name], 'M/d/yyyy h:mm a');\n\n    case tubular_common_1.ColumnDataType.Boolean:\n      return row[column.name] === true ? React.createElement(CheckBox_1.default, null) : React.createElement(CheckBoxOutlineBlank_1.default, null);\n\n    default:\n      return row[column.name];\n  }\n};\n\nexports.renderDefaultListItem = function (columns, row) {\n  return columns.filter(function (col) {\n    return col.visible;\n  }).map(function (column) {\n    return React.createElement(\"div\", {\n      key: column.name\n    }, exports.renderCellContent(column, row));\n  });\n};\n\nexports.renderCells = function (columns, row) {\n  return columns.filter(function (col) {\n    return col.visible;\n  }).map(function (column) {\n    return React.createElement(TableCell_1.default, {\n      key: column.name,\n      padding: column.label === '' ? 'none' : 'default',\n      align: tubular_common_1.getColumnAlign(column)\n    }, exports.renderCellContent(column, row));\n  });\n};","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/node_modules/tubular-react/dist/utils/renders.js"],"names":["Object","defineProperty","exports","value","TableCell_1","require","CheckBox_1","CheckBoxOutlineBlank_1","React","tubular_common_1","renderCellContent","column","row","dataType","ColumnDataType","Numeric","name","Date","formatDate","DateTime","DateTimeUtc","Boolean","createElement","default","renderDefaultListItem","columns","filter","col","visible","map","key","renderCells","padding","label","align","getColumnAlign"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAAzB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,6BAAD,CAAxB;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,yCAAD,CAApC;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,gBAAD,CAA9B;;AACAH,OAAO,CAACQ,iBAAR,GAA4B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC/C,UAAQD,MAAM,CAACE,QAAf;AACI,SAAKJ,gBAAgB,CAACK,cAAjB,CAAgCC,OAArC;AACI,aAAOH,GAAG,CAACD,MAAM,CAACK,IAAR,CAAH,IAAoB,CAA3B;;AACJ,SAAKP,gBAAgB,CAACK,cAAjB,CAAgCG,IAArC;AACI,aAAOR,gBAAgB,CAACS,UAAjB,CAA4BN,GAAG,CAACD,MAAM,CAACK,IAAR,CAA/B,CAAP;;AACJ,SAAKP,gBAAgB,CAACK,cAAjB,CAAgCK,QAArC;AACA,SAAKV,gBAAgB,CAACK,cAAjB,CAAgCM,WAArC;AACI,aAAOX,gBAAgB,CAACS,UAAjB,CAA4BN,GAAG,CAACD,MAAM,CAACK,IAAR,CAA/B,EAA8C,iBAA9C,CAAP;;AACJ,SAAKP,gBAAgB,CAACK,cAAjB,CAAgCO,OAArC;AACI,aAAOT,GAAG,CAACD,MAAM,CAACK,IAAR,CAAH,KAAqB,IAArB,GAA4BR,KAAK,CAACc,aAAN,CAAoBhB,UAAU,CAACiB,OAA/B,EAAwC,IAAxC,CAA5B,GAA4Ef,KAAK,CAACc,aAAN,CAAoBf,sBAAsB,CAACgB,OAA3C,EAAoD,IAApD,CAAnF;;AACJ;AACI,aAAOX,GAAG,CAACD,MAAM,CAACK,IAAR,CAAV;AAXR;AAaH,CAdD;;AAeAd,OAAO,CAACsB,qBAAR,GAAgC,UAAUC,OAAV,EAAmBb,GAAnB,EAAwB;AACpD,SAAOa,OAAO,CACTC,MADE,CACK,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACC,OAAX;AAAqB,GAD3C,EAEFC,GAFE,CAEE,UAAUlB,MAAV,EAAkB;AAAE,WAAOH,KAAK,CAACc,aAAN,CAAoB,KAApB,EAA2B;AAAEQ,MAAAA,GAAG,EAAEnB,MAAM,CAACK;AAAd,KAA3B,EAAiDd,OAAO,CAACQ,iBAAR,CAA0BC,MAA1B,EAAkCC,GAAlC,CAAjD,CAAP;AAAkG,GAFxH,CAAP;AAGH,CAJD;;AAKAV,OAAO,CAAC6B,WAAR,GAAsB,UAAUN,OAAV,EAAmBb,GAAnB,EAAwB;AAC1C,SAAOa,OAAO,CACTC,MADE,CACK,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACC,OAAX;AAAqB,GAD3C,EAEFC,GAFE,CAEE,UAAUlB,MAAV,EAAkB;AAAE,WAAQH,KAAK,CAACc,aAAN,CAAoBlB,WAAW,CAACmB,OAAhC,EAAyC;AAAEO,MAAAA,GAAG,EAAEnB,MAAM,CAACK,IAAd;AAAoBgB,MAAAA,OAAO,EAAErB,MAAM,CAACsB,KAAP,KAAiB,EAAjB,GAAsB,MAAtB,GAA+B,SAA5D;AAAuEC,MAAAA,KAAK,EAAEzB,gBAAgB,CAAC0B,cAAjB,CAAgCxB,MAAhC;AAA9E,KAAzC,EAAkKT,OAAO,CAACQ,iBAAR,CAA0BC,MAA1B,EAAkCC,GAAlC,CAAlK,CAAR;AAAqN,GAF3O,CAAP;AAGH,CAJD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TableCell_1 = require(\"@material-ui/core/TableCell\");\nvar CheckBox_1 = require(\"@material-ui/icons/CheckBox\");\nvar CheckBoxOutlineBlank_1 = require(\"@material-ui/icons/CheckBoxOutlineBlank\");\nvar React = require(\"react\");\nvar tubular_common_1 = require(\"tubular-common\");\nexports.renderCellContent = function (column, row) {\n    switch (column.dataType) {\n        case tubular_common_1.ColumnDataType.Numeric:\n            return row[column.name] || 0;\n        case tubular_common_1.ColumnDataType.Date:\n            return tubular_common_1.formatDate(row[column.name]);\n        case tubular_common_1.ColumnDataType.DateTime:\n        case tubular_common_1.ColumnDataType.DateTimeUtc:\n            return tubular_common_1.formatDate(row[column.name], 'M/d/yyyy h:mm a');\n        case tubular_common_1.ColumnDataType.Boolean:\n            return row[column.name] === true ? React.createElement(CheckBox_1.default, null) : React.createElement(CheckBoxOutlineBlank_1.default, null);\n        default:\n            return row[column.name];\n    }\n};\nexports.renderDefaultListItem = function (columns, row) {\n    return columns\n        .filter(function (col) { return col.visible; })\n        .map(function (column) { return React.createElement(\"div\", { key: column.name }, exports.renderCellContent(column, row)); });\n};\nexports.renderCells = function (columns, row) {\n    return columns\n        .filter(function (col) { return col.visible; })\n        .map(function (column) { return (React.createElement(TableCell_1.default, { key: column.name, padding: column.label === '' ? 'none' : 'default', align: tubular_common_1.getColumnAlign(column) }, exports.renderCellContent(column, row))); });\n};\n"]},"metadata":{},"sourceType":"script"}