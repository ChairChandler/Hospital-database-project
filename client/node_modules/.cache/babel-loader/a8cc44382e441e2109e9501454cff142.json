{"ast":null,"code":"var _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js\";\nimport React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport { AddUserDialog, EditUserDialog, DeleteUserDialog } from './Dialogs';\nexport default class DoctorPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reload = () => {\n      this.ready = false;\n      this.forceUpdate();\n      this.getUsers();\n    };\n\n    this.getUsers = () => {\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'show users',\n          data: this.props.user\n        })\n      }).then(res => res.json()).then(json => {\n        this.headers = json.headers;\n        this.rows = json.rows;\n        this.ready = true;\n        this.forceUpdate();\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.getTypes = () => {\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'show types',\n          data: this.props.user\n        })\n      }).then(res => res.json()).then(json => {\n        this.types = json.types;\n        this.forceUpdate();\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.addUser = () => {\n      let data = this.props.user;\n      data['user'] = this.dialogs.addUser.data;\n      /*\n      {\n          login: null,\n          password: null,\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'add user',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.editUser = () => {\n      let data = this.props.user;\n      data['user'] = this.dialogs.editUser.data;\n      data.user['login'] = this.clickedRows[0].nazwa;\n      /*\n      {\n          password: '',\n          type: null\n      }\n      */\n\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'edit user',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.deleteUsers = () => {\n      let data = this.props.user;\n      data['users'] = this.clickedRows;\n      fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          operation: 'delete users',\n          data: data\n        })\n      }).then(res => res.json()).then(json => {\n        if (json.error) {\n          alert(json.error);\n        } else {\n          this.clickedRows = [];\n          this.reload();\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.openDialog = id => {\n      this.dialogs[id].open = true;\n      this.forceUpdate();\n    };\n\n    this.closeDialog = (id, status) => {\n      this.dialogs[id].open = false;\n\n      switch (id) {\n        case 'addUser':\n          if (status === 'done') {\n            this.addUser();\n          }\n\n          break;\n\n        case 'editUser':\n          if (status === 'done') {\n            this.editUser();\n          }\n\n          break;\n\n        case 'deleteUser':\n          if (status === 'delete') {\n            this.deleteUsers();\n          }\n\n          break;\n\n        default:\n      }\n\n      this.forceUpdate();\n    };\n\n    this.onRowClick = rows => {\n      this.clickedRows = rows;\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.headers && this.rows && this.ready && React.createElement(SQLTable, {\n        headers: this.headers,\n        rows: this.rows,\n        onRowClick: this.onRowClick,\n        selectRowChecbox: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }));\n    };\n\n    this.getTypes();\n    this.getUsers();\n    this.clickedRows = [];\n    this.types = [];\n    this.ready = true;\n    this.dialogs = {\n      'addUser': {\n        open: false\n      },\n      'editUser': {\n        open: false\n      },\n      'deleteUser': {\n        open: false\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DoctorPanel/DoctorPanel.js"],"names":["React","SQLTable","IconButton","AddOutlinedIcon","EditOutlinedIcon","RemoveCircleOutlineOutlinedIcon","AddUserDialog","EditUserDialog","DeleteUserDialog","DoctorPanel","Component","constructor","props","reload","ready","forceUpdate","getUsers","fetch","connection","ip","port","method","headers","body","JSON","stringify","operation","data","user","then","res","json","rows","catch","error","alert","getTypes","types","addUser","dialogs","editUser","clickedRows","nazwa","deleteUsers","openDialog","id","open","closeDialog","status","onRowClick","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SQLTable from '../Shared/SQLTable';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\nimport {AddUserDialog, EditUserDialog, DeleteUserDialog} from './Dialogs'\n\nexport default class DoctorPanel extends React.Component {\n    constructor(props) {\n        super(props)\n        this.getTypes()\n        this.getUsers()\n        this.clickedRows = []\n        this.types = []\n        this.ready = true\n        this.dialogs = {\n            'addUser': {\n                open: false\n            },\n            'editUser': {\n                open: false\n            },\n            'deleteUser': {\n                open: false\n            }\n        }\n    }\n    \n    reload = () => {\n        this.ready = false\n        this.forceUpdate()\n        this.getUsers()\n    }\n\n    getUsers = () => {\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            operation: 'show users',\n            data: this.props.user\n          })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.headers = json.headers\n            this.rows = json.rows\n            this.ready = true\n            this.forceUpdate()\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    getTypes = () => {\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            operation: 'show types',\n            data: this.props.user\n          })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.types = json.types\n            this.forceUpdate()\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n\n    addUser = () => {\n        let data = this.props.user\n        data['user'] = this.dialogs.addUser.data\n\n        /*\n        {\n            login: null,\n            password: null,\n            type: null\n        }\n        */\n        \n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'add user',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    editUser = () => {\n        let data = this.props.user\n        data['user'] = this.dialogs.editUser.data\n        data.user['login'] = this.clickedRows[0].nazwa\n        /*\n        {\n            password: '',\n            type: null\n        }\n        */\n\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'edit user',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    deleteUsers = () => {\n        let data = this.props.user\n        data['users'] = this.clickedRows\n\n        fetch(`http://${this.props.connection.ip}:${this.props.connection.port}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'text/plain',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              operation: 'delete users',\n              data: data\n            })\n          })\n          .then(res => res.json())\n          .then(json => {\n              if(json.error) {\n                alert(json.error)\n              } else {\n                this.clickedRows = []\n                this.reload()\n              }\n          })\n          .catch(error => {\n              alert(error)\n          })\n    }\n\n    openDialog = (id) => {\n        this.dialogs[id].open = true\n        this.forceUpdate()\n    }\n\n    closeDialog = (id, status) => {\n        this.dialogs[id].open = false\n        switch(id) {\n            case 'addUser':\n                if(status === 'done') {\n                    this.addUser()\n                }\n            break\n\n            case 'editUser':\n                if(status === 'done') {\n                    this.editUser()\n                }\n            break\n\n            case 'deleteUser':\n                if(status === 'delete') {\n                    this.deleteUsers()\n                }\n            break\n\n            default:\n        }\n        \n        this.forceUpdate()\n    }\n\n    onRowClick = (rows) => {\n        this.clickedRows = rows\n    }\n\n    render = () => {\n        return(\n            <div>\n                {this.headers && this.rows && this.ready && (\n                    <SQLTable headers={this.headers} rows={this.rows} onRowClick={this.onRowClick} selectRowChecbox='true'>\n                        \n                    </SQLTable>\n                )}\n\n                \n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}