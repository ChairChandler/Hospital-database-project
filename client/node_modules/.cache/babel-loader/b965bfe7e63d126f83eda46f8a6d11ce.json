{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/Dialogs/TreatmentDialogs.js\";\nimport React from 'react';\nimport { FormDialog, QuestionDialog } from '../../Shared/Dialog';\nimport { TextField, Grid, Switch } from '@material-ui/core';\nexport class AddTreatmentTypeDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validate = () => {\n      const treatmentCreate = this.props.treatments.some(treat => treat.typ === this.state.inputs.type_name);\n      const hour = this.state.inputs.duration.getHours();\n      const minutes = this.state.inputs.duration.getMinutes();\n      return {\n        //true means error\n        errors: {\n          type_name: this.state.inputs.type_name.length === 0 || treatmentCreate,\n          duration: hour === 10 && minutes || hour === 0 && minutes < 5\n        },\n        errorsLabel: {\n          type_name: this.state.inputs.type_name.length === 0 ? 'Pusta nazwa zabiegu' : treatmentCreate ? 'Taki zabieg jest już oferowany' : '',\n          duration: hour === 10 && minutes || hour === 0 && minutes < 5 ? 'Niewłaściwy format czasu <00:05 ; 10:00>' : ''\n        }\n      };\n    };\n\n    this.setInputValue = (name, val) => {\n      const state = this.state;\n      state.inputs[name] = val;\n      this.setState(state);\n    };\n\n    this.exit = () => {\n      const state = this.state;\n      state.isCancelled = true;\n      this.setState(state);\n    };\n\n    this.setErrors = (errors, label) => {\n      const state = this.state;\n      state.errors = errors;\n      state.errorsLabel = label;\n      this.setState(state);\n    };\n\n    this.submit = button => {\n      if (button === 'cancel') {\n        this.exit();\n        this.props.onClose(button);\n      } else {\n        const errors = this.validate();\n        const isError = Object.keys(errors.errors).some(key => errors.errors[key]);\n\n        if (isError) {\n          this.setErrors(errors.errors, errors.errorsLabel);\n        } else {\n          this.props.setData(this.state.inputs);\n          this.exit();\n          this.props.onClose(button);\n        }\n      }\n    };\n\n    this.convertTimeToString = time => {\n      let hour = time.getHours().toString();\n      let minutes = time.getMinutes().toString();\n\n      if (hour.length !== 2) {\n        hour = '0' + hour;\n      }\n\n      if (minutes.length !== 2) {\n        minutes = '0' + minutes;\n      }\n\n      return `${hour}:${minutes}`;\n    };\n\n    this.convertStringToTime = string => {\n      const _string$split = string.split(':'),\n            _string$split2 = _slicedToArray(_string$split, 2),\n            h = _string$split2[0],\n            m = _string$split2[1];\n\n      const time = new Date();\n      time.setHours(h, m);\n      return time;\n    };\n\n    this.setSpec = (name, val) => {\n      const state = this.state;\n      state.inputs.specs[name].checked = val;\n      this.setState(state);\n    };\n\n    this.render = () => {\n      return !this.state.isCancelled && React.createElement(FormDialog, {\n        title: this.props.title,\n        isOpen: true,\n        message: this.props.message,\n        onClose: type => {\n          this.submit(type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        autoFocus: true,\n        required: true,\n        error: this.state.errors.type_name,\n        helperText: this.state.errorsLabel.type_name,\n        margin: \"dense\",\n        id: \"type_name\",\n        label: \"Nazwa zabiegu\",\n        type: \"text\",\n        fullWidth: true,\n        onChange: event => {\n          if (event.target.value !== null) this.setInputValue('type_name', event.target.value);\n        },\n        inputProps: {\n          maxLength: 45\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          \"paddingRight\": '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Cena  \"), React.createElement(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        max: \"1000000\",\n        value: this.state.inputs.price,\n        onChange: event => {\n          this.setInputValue('price', event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          \"paddingRight\": '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.errors.duration ? this.state.errorsLabel.duration : 'Czas'), React.createElement(\"input\", {\n        type: \"time\",\n        name: \"duration\",\n        required: true,\n        min: \"00:05\",\n        max: \"10:00\",\n        value: this.convertTimeToString(this.state.inputs.duration),\n        onChange: event => {\n          this.setInputValue('duration', this.convertStringToTime(event.target.value));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.state.inputs.specs.map(val => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          paddingRight: \"5px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, val)), React.createElement(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        checked: val.checked,\n        onChange: event => {\n          if (event.target.value !== null) this.setSpec(val, event.target.checked);\n        },\n        inputProps: {\n          'aria-label': 'primary checkbox'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }))))));\n    };\n\n    const _time = new Date();\n\n    _time.setHours(0, 5);\n\n    this.state = {\n      inputs: {\n        type_name: '',\n        price: 0,\n        duration: _time,\n        specs: this.props.specs.map(val => ({\n          name: val.nazwa,\n          checked: false\n        }))\n      },\n      errors: {\n        type_name: false,\n        duration: false\n      },\n      errorsLabel: {\n        type_name: '',\n        duration: ''\n      },\n      isCancelled: false\n    };\n  }\n\n}\nexport const DeleteTreatmentTypeDialog = ({\n  isOpen,\n  title,\n  onClose\n}) => React.createElement(QuestionDialog, {\n  isOpen: isOpen,\n  title: title,\n  question: \"Czy jestes pewny?\",\n  answers: ['cancel', 'delete'],\n  onClose: onClose,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 164\n  },\n  __self: this\n});","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/DirectorPanel/Dialogs/TreatmentDialogs.js"],"names":["React","FormDialog","QuestionDialog","TextField","Grid","Switch","AddTreatmentTypeDialog","Component","constructor","props","validate","treatmentCreate","treatments","some","treat","typ","state","inputs","type_name","hour","duration","getHours","minutes","getMinutes","errors","length","errorsLabel","setInputValue","name","val","setState","exit","isCancelled","setErrors","label","submit","button","onClose","isError","Object","keys","key","setData","convertTimeToString","time","toString","convertStringToTime","string","split","h","m","Date","setHours","setSpec","specs","checked","render","title","message","type","event","target","value","maxLength","price","map","paddingRight","nazwa","DeleteTreatmentTypeDialog","isOpen"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormDialog, QuestionDialog } from '../../Shared/Dialog';\nimport { TextField, Grid, Switch } from '@material-ui/core';\n\nexport class AddTreatmentTypeDialog extends React.Component { \n    constructor(props) {\n    super(props)\n    \n    const time = new Date()\n    time.setHours(0, 5)\n\n    this.state = {\n      inputs: {\n        type_name: '',\n        price: 0,\n        duration: time,\n        specs: this.props.specs.map(val => ({name: val.nazwa, checked: false}))\n      },\n      errors: {\n        type_name: false,\n        duration: false\n      },\n      errorsLabel: {\n        type_name: '',\n        duration: ''\n      },\n      isCancelled: false,\n    } \n  }\n\n  validate = () => {\n    const treatmentCreate = this.props.treatments.some(treat => treat.typ === this.state.inputs.type_name)\n    const hour = this.state.inputs.duration.getHours()\n    const minutes = this.state.inputs.duration.getMinutes()\n    return { //true means error\n      errors: {\n        type_name: this.state.inputs.type_name.length === 0 || treatmentCreate,\n        duration: (hour === 10 && minutes) || (hour === 0 && minutes < 5)\n      },\n      errorsLabel: {\n        type_name: this.state.inputs.type_name.length === 0 ? 'Pusta nazwa zabiegu' : (treatmentCreate ? 'Taki zabieg jest już oferowany' : ''),\n        duration: ((hour === 10 && minutes) || (hour === 0 && minutes < 5)) ? 'Niewłaściwy format czasu <00:05 ; 10:00>' : ''\n      }\n    }\n  }\n\n  setInputValue = (name, val) => {\n    const state = this.state\n    state.inputs[name] = val\n    this.setState(state)\n  }\n\n  exit = () => {\n    const state = this.state\n    state.isCancelled = true\n    this.setState(state)\n  }\n\n  setErrors = (errors, label) => {\n    const state = this.state\n    state.errors = errors\n    state.errorsLabel = label\n    this.setState(state)\n  }\n\n  submit = (button) => {\n    if(button === 'cancel') {\n      this.exit()\n      this.props.onClose(button)\n    } else {\n      const errors = this.validate()\n      const isError = Object.keys(errors.errors).some(key => errors.errors[key])\n      \n      if(isError) {\n        this.setErrors(errors.errors, errors.errorsLabel)\n      } else {\n        this.props.setData(this.state.inputs)\n        this.exit()\n        this.props.onClose(button)\n      }\n    }\n  }\n\n  convertTimeToString = (time) => {\n      let hour = time.getHours().toString()\n      let minutes = time.getMinutes().toString()\n\n      if(hour.length !== 2) {\n          hour = '0' + hour\n      }\n\n      if(minutes.length !== 2) {\n        minutes = '0' + minutes\n      }\n\n      return `${hour}:${minutes}`\n    }\n\n    convertStringToTime = (string) => {\n        const [h, m] = string.split(':')\n        const time = new Date()\n        time.setHours(h, m)\n        return time\n      }\n\n    setSpec = (name, val) => {\n        const state = this.state\n        state.inputs.specs[name].checked = val\n        this.setState(state)\n    }\n\n  render = () => {\n    return !this.state.isCancelled && (\n    <FormDialog title={this.props.title} isOpen={true} message={this.props.message} onClose={(type) => {this.submit(type)}}>\n\n        <TextField\n        autoFocus\n        required\n        error={this.state.errors.type_name}\n        helperText={this.state.errorsLabel.type_name}\n        margin=\"dense\"\n        id=\"type_name\"\n        label=\"Nazwa zabiegu\"\n        type=\"text\"\n        fullWidth\n        onChange={(event) => {if(event.target.value !== null) this.setInputValue('type_name', event.target.value)}}\n        inputProps={{ maxLength: 45 }}\n        />\n\n        <div>\n        <label style={{\"paddingRight\": '5px'}}>Cena  </label>\n        <input type=\"number\" min=\"0\" max=\"1000000\" value={this.state.inputs.price} onChange={(event) => {this.setInputValue('price', event.target.value)}}/>\n        </div>\n\n        <div></div>\n\n        <div>\n        <label style={{\"paddingRight\": '5px'}}>{this.state.errors.duration ? this.state.errorsLabel.duration : 'Czas'}</label>\n        <input type=\"time\" name=\"duration\" required min=\"00:05\" max=\"10:00\" value={this.convertTimeToString(this.state.inputs.duration)} onChange={(event) => {this.setInputValue('duration', this.convertStringToTime(event.target.value))}}></input>\n        </div>\n\n        <Grid container>\n            {this.state.inputs.specs.map(val => (\n                <div>\n                    <Grid item xs={2}>\n                        <label style={{paddingRight: \"5px\"}}>{val}</label>\n                    </Grid>\n                    <Grid item xs={10}>\n                        <Switch\n                        checked={val.checked}\n                        onChange={(event) => {if(event.target.value !== null) this.setSpec(val, event.target.checked)}}\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />\n                    </Grid>\n                </div>\n            ))}\n        </Grid>\n\n    </FormDialog>\n  )}\n}\n\nexport const DeleteTreatmentTypeDialog = ({isOpen, title, onClose}) =>\n  <QuestionDialog isOpen={isOpen} title={title} question=\"Czy jestes pewny?\" answers={['cancel', 'delete']} onClose={onClose}/>"]},"metadata":{},"sourceType":"module"}