{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\nexport default function SQLTable(props) {\n  const _React$useState = React.useState(props.headers),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        headers = _React$useState2[0],\n        setHeaders = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        clickedRows = _React$useState4[0],\n        setClickedRows = _React$useState4[1]; //headers\n\n\n  let convHeaders = headers.map(({\n    header,\n    label\n  }, colnum) => new ColumnModel(header, {\n    sortable: true,\n    searchable: true\n  })); //rows\n\n  let newRows;\n\n  if (props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel('selected', {\n      label: ' '\n    }));\n    newRows = props.rows.map(val => {\n      val['selected'] = React.createElement(Checkbox, {\n        onClick: () => onRowClick(val),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n      return val;\n    });\n  } else {\n    newRows = props.rows;\n  }\n\n  const _React$useState5 = React.useState(newRows),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        rows = _React$useState6[0],\n        setRows = _React$useState6[1]; //buttons\n\n\n  const _React$useState7 = React.useState(convHeaders),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        columns = _React$useState8[0],\n        setColumns = _React$useState8[1];\n\n  const toolbarButton = new ToolbarOptions({\n    customItems: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, props.children)\n  });\n\n  function onRowClick(row) {\n    let copy = Array.from(clickedRows);\n    let indx = clickedRows.findIndex(val => val === row);\n\n    if (indx < 0) {\n      copy.push(row);\n    } else {\n      copy.splice(indx, 1);\n    }\n\n    setClickedRows(copy);\n    alert(`LENGTH: ${copy.length}`);\n    props.onRowClick(clickedRows);\n  }\n\n  return React.createElement(DataGrid, {\n    columns: columns,\n    dataSource: rows,\n    gridName: props.title,\n    onRowClick: props.selectRowChecbox ? null : props.onRowClick,\n    toolbarOptions: toolbarButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","DataGrid","ToolbarOptions","ColumnModel","Checkbox","SQLTable","props","useState","headers","setHeaders","clickedRows","setClickedRows","convHeaders","map","header","label","colnum","sortable","searchable","newRows","selectRowChecbox","push","rows","val","onRowClick","setRows","columns","setColumns","toolbarButton","customItems","children","row","copy","Array","from","indx","findIndex","splice","alert","length","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid, ToolbarOptions } from 'tubular-react';\nimport { ColumnModel} from 'tubular-common';\nimport { Checkbox } from '@material-ui/core';\n\nexport default function SQLTable(props) {\n  const [headers, setHeaders] = React.useState(props.headers)\n  const [clickedRows, setClickedRows] = React.useState([])\n\n  //headers\n  let convHeaders = headers.map(({header, label}, colnum) => \n    new ColumnModel(header, {\n      sortable: true,\n      searchable: true\n    }))\n\n\n  //rows\n  let newRows\n  if(props.selectRowChecbox) {\n    convHeaders.push(new ColumnModel('selected', {label: ' '}))\n    newRows = props.rows.map(val => {\n        val['selected'] = <Checkbox onClick={() => onRowClick(val)}></Checkbox>\n        return val\n    })\n  } else {\n    newRows = props.rows\n  }\n  const [rows, setRows] = React.useState(newRows)\n\n\n  //buttons\n  const [columns, setColumns] = React.useState(convHeaders)\n  const toolbarButton = new ToolbarOptions({\n    customItems: <div>{props.children}</div>\n  });\n\n\n\n  function onRowClick(row) {\n    let copy = Array.from(clickedRows)\n    let indx = clickedRows.findIndex((val) => val === row)\n    if(indx < 0) {  \n      copy.push(row)\n    } else {\n      copy.splice(indx, 1)\n    }\n    setClickedRows(copy)\n    alert(`LENGTH: ${copy.length}`)\n    props.onRowClick(clickedRows)\n  } \n\n  return (\n    <DataGrid\n    columns={columns}\n    dataSource={rows}\n    gridName={props.title}\n    onRowClick={props.selectRowChecbox ? null : props.onRowClick}\n    toolbarOptions={toolbarButton}\n   />\n  )\n}"]},"metadata":{},"sourceType":"module"}