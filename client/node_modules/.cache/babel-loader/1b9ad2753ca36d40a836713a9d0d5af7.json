{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Column_1 = require(\"./Column\");\n\nfunction filterProps(name) {\n  return {\n    argument: [],\n    hasFilter: false,\n    name: name,\n    operator: 'None',\n    text: null\n  };\n}\n\nvar NumericOperators = [{\n  value: Column_1.CompareOperators.None,\n  title: 'None'\n}, {\n  value: Column_1.CompareOperators.Equals,\n  title: 'Equals'\n}, {\n  value: Column_1.CompareOperators.Between,\n  title: 'Between'\n}, {\n  value: Column_1.CompareOperators.Gte,\n  title: '>='\n}, {\n  value: Column_1.CompareOperators.Gt,\n  title: '>'\n}, {\n  value: Column_1.CompareOperators.Lte,\n  title: '<='\n}, {\n  value: Column_1.CompareOperators.Lt,\n  title: '<'\n}];\nvar StringOperators = [{\n  value: Column_1.CompareOperators.None,\n  title: 'None'\n}, {\n  value: Column_1.CompareOperators.Equals,\n  title: 'Equals'\n}, {\n  value: Column_1.CompareOperators.NotEquals,\n  title: 'Not Equals'\n}, {\n  value: Column_1.CompareOperators.Contains,\n  title: 'Contains'\n}, {\n  value: Column_1.CompareOperators.NotContains,\n  title: 'Not Contains'\n}, {\n  value: Column_1.CompareOperators.StartsWith,\n  title: 'Starts With'\n}, {\n  value: Column_1.CompareOperators.NotStartsWith,\n  title: 'Not Starts With'\n}, {\n  value: Column_1.CompareOperators.EndsWith,\n  title: 'Ends With'\n}, {\n  value: Column_1.CompareOperators.NotEndsWith,\n  title: 'Not Ends With'\n}];\nvar BooleanOperators = [{\n  value: Column_1.CompareOperators.None,\n  title: 'None'\n}, {\n  value: Column_1.CompareOperators.Equals,\n  title: 'Equals'\n}, {\n  value: Column_1.CompareOperators.NotEquals,\n  title: 'Not Equals'\n}];\n\nvar ColumnModel =\n/** @class */\nfunction () {\n  function ColumnModel(name, options) {\n    this.hasFilter = this.filter && (this.filter.text || this.filter.argument) && this.filter.operator !== Column_1.CompareOperators.None;\n    this.aggregate = options && options.aggregate || Column_1.AggregateFunctions.None;\n    this.dataType = options && options.dataType || Column_1.ColumnDataType.String;\n    this.isKey = options && options.isKey || false;\n    this.label = options && options.label || (name || '').replace(/([a-z])([A-Z])/g, '$1 $2');\n    this.name = name;\n    this.searchable = options && options.searchable || false;\n    this.sortDirection = options && options.sortable && options.sortDirection || Column_1.ColumnSortDirection.None;\n    this.sortOrder = options && this.sortDirection !== Column_1.ColumnSortDirection.None && options.sortOrder || -1;\n    this.sortable = options && options.sortable || false;\n    this.visible = options && typeof options.visible === 'boolean' ? options.visible : true;\n    this.filter = options && options.filterable === true ? filterProps(name) : {\n      argument: [],\n      operator: Column_1.CompareOperators.None,\n      hasFilter: false\n    };\n    this.filterable = options && options.filterable || false;\n    this.filter.hasFilter = this.hasFilter;\n  }\n\n  ColumnModel.createFilterPatch = function (column) {\n    var filterText = column.filter.text;\n    var filterArgument = column.filter.argument[0];\n\n    if (column.dataType === Column_1.ColumnDataType.Numeric) {\n      filterText = parseFloat(filterText).toString();\n      filterArgument = parseFloat(filterArgument).toString();\n    } else if (column.dataType === Column_1.ColumnDataType.Boolean) {\n      filterText = (filterText === 'true').toString();\n      filterArgument = '';\n    }\n\n    return {\n      name: column.name,\n      argument: [filterArgument],\n      hasFilter: true,\n      operator: column.filter.operator || Column_1.CompareOperators.Auto,\n      text: filterText\n    };\n  };\n\n  ColumnModel.getOperators = function (column) {\n    switch (column.dataType) {\n      case Column_1.ColumnDataType.String:\n        return StringOperators;\n\n      case Column_1.ColumnDataType.Numeric:\n      case Column_1.ColumnDataType.Date:\n      case Column_1.ColumnDataType.DateTime:\n      case Column_1.ColumnDataType.DateTimeUtc:\n        return NumericOperators;\n\n      case Column_1.ColumnDataType.Boolean:\n        return BooleanOperators;\n\n      default:\n        return [];\n    }\n  };\n\n  ColumnModel.sortColumnArray = function (columnName, columns, multiSort) {\n    var column = columns.find(function (c) {\n      return c.name === columnName;\n    });\n\n    if (!column) {\n      return;\n    }\n\n    column.sortDirection = column.sortDirection === Column_1.ColumnSortDirection.None ? Column_1.ColumnSortDirection.Ascending : column.sortDirection === Column_1.ColumnSortDirection.Ascending ? Column_1.ColumnSortDirection.Descending : Column_1.ColumnSortDirection.None;\n    column.sortOrder = column.sortDirection === Column_1.ColumnSortDirection.None ? -1 : Number.MAX_VALUE;\n\n    if (!multiSort) {\n      columns.filter(function (col) {\n        return col.name !== columnName;\n      }).forEach(function (c) {\n        c.sortOrder = -1;\n        c.sortDirection = Column_1.ColumnSortDirection.None;\n      });\n    }\n\n    columns.filter(function (col) {\n      return col.sortOrder > 0;\n    }).sort(function (a, b) {\n      return a.sortOrder === b.sortOrder ? 0 : a.sortOrder > b.sortOrder ? 1 : -1;\n    }).forEach(function (col, i) {\n      col.sortOrder = i + 1;\n    });\n    return columns;\n  };\n\n  ColumnModel.clearFilterPatch = function () {\n    return {\n      argument: [''],\n      hasFilter: false,\n      operator: Column_1.CompareOperators.None,\n      text: ''\n    };\n  };\n\n  return ColumnModel;\n}();\n\nexports.default = ColumnModel;","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/node_modules/tubular-common/dist/Models/ColumnModel.js"],"names":["Object","defineProperty","exports","value","Column_1","require","filterProps","name","argument","hasFilter","operator","text","NumericOperators","CompareOperators","None","title","Equals","Between","Gte","Gt","Lte","Lt","StringOperators","NotEquals","Contains","NotContains","StartsWith","NotStartsWith","EndsWith","NotEndsWith","BooleanOperators","ColumnModel","options","filter","aggregate","AggregateFunctions","dataType","ColumnDataType","String","isKey","label","replace","searchable","sortDirection","sortable","ColumnSortDirection","sortOrder","visible","filterable","createFilterPatch","column","filterText","filterArgument","Numeric","parseFloat","toString","Boolean","Auto","getOperators","Date","DateTime","DateTimeUtc","sortColumnArray","columnName","columns","multiSort","find","c","Ascending","Descending","Number","MAX_VALUE","col","forEach","sort","a","b","i","clearFilterPatch","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAO;AACHC,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,SAAS,EAAE,KAFR;AAGHF,IAAAA,IAAI,EAAEA,IAHH;AAIHG,IAAAA,QAAQ,EAAE,MAJP;AAKHC,IAAAA,IAAI,EAAE;AALH,GAAP;AAOH;;AACD,IAAIC,gBAAgB,GAAG,CACnB;AAAET,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BC,IAAnC;AAAyCC,EAAAA,KAAK,EAAE;AAAhD,CADmB,EAEnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BG,MAAnC;AAA2CD,EAAAA,KAAK,EAAE;AAAlD,CAFmB,EAGnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BI,OAAnC;AAA4CF,EAAAA,KAAK,EAAE;AAAnD,CAHmB,EAInB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BK,GAAnC;AAAwCH,EAAAA,KAAK,EAAE;AAA/C,CAJmB,EAKnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BM,EAAnC;AAAuCJ,EAAAA,KAAK,EAAE;AAA9C,CALmB,EAMnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BO,GAAnC;AAAwCL,EAAAA,KAAK,EAAE;AAA/C,CANmB,EAOnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BQ,EAAnC;AAAuCN,EAAAA,KAAK,EAAE;AAA9C,CAPmB,CAAvB;AASA,IAAIO,eAAe,GAAG,CAClB;AAAEnB,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BC,IAAnC;AAAyCC,EAAAA,KAAK,EAAE;AAAhD,CADkB,EAElB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BG,MAAnC;AAA2CD,EAAAA,KAAK,EAAE;AAAlD,CAFkB,EAGlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BU,SAAnC;AAA8CR,EAAAA,KAAK,EAAE;AAArD,CAHkB,EAIlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BW,QAAnC;AAA6CT,EAAAA,KAAK,EAAE;AAApD,CAJkB,EAKlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BY,WAAnC;AAAgDV,EAAAA,KAAK,EAAE;AAAvD,CALkB,EAMlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0Ba,UAAnC;AAA+CX,EAAAA,KAAK,EAAE;AAAtD,CANkB,EAOlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0Bc,aAAnC;AAAkDZ,EAAAA,KAAK,EAAE;AAAzD,CAPkB,EAQlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0Be,QAAnC;AAA6Cb,EAAAA,KAAK,EAAE;AAApD,CARkB,EASlB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BgB,WAAnC;AAAgDd,EAAAA,KAAK,EAAE;AAAvD,CATkB,CAAtB;AAWA,IAAIe,gBAAgB,GAAG,CACnB;AAAE3B,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BC,IAAnC;AAAyCC,EAAAA,KAAK,EAAE;AAAhD,CADmB,EAEnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BG,MAAnC;AAA2CD,EAAAA,KAAK,EAAE;AAAlD,CAFmB,EAGnB;AAAEZ,EAAAA,KAAK,EAAEC,QAAQ,CAACS,gBAAT,CAA0BU,SAAnC;AAA8CR,EAAAA,KAAK,EAAE;AAArD,CAHmB,CAAvB;;AAKA,IAAIgB,WAAW;AAAG;AAAe,YAAY;AACzC,WAASA,WAAT,CAAqBxB,IAArB,EAA2ByB,OAA3B,EAAoC;AAChC,SAAKvB,SAAL,GAAiB,KAAKwB,MAAL,KAAgB,KAAKA,MAAL,CAAYtB,IAAZ,IAAoB,KAAKsB,MAAL,CAAYzB,QAAhD,KAA6D,KAAKyB,MAAL,CAAYvB,QAAZ,KAAyBN,QAAQ,CAACS,gBAAT,CAA0BC,IAAjI;AACA,SAAKoB,SAAL,GAAkBF,OAAO,IAAIA,OAAO,CAACE,SAApB,IAAkC9B,QAAQ,CAAC+B,kBAAT,CAA4BrB,IAA/E;AACA,SAAKsB,QAAL,GAAiBJ,OAAO,IAAIA,OAAO,CAACI,QAApB,IAAiChC,QAAQ,CAACiC,cAAT,CAAwBC,MAAzE;AACA,SAAKC,KAAL,GAAcP,OAAO,IAAIA,OAAO,CAACO,KAApB,IAA8B,KAA3C;AACA,SAAKC,KAAL,GAAcR,OAAO,IAAIA,OAAO,CAACQ,KAApB,IAA8B,CAACjC,IAAI,IAAI,EAAT,EAAakC,OAAb,CAAqB,iBAArB,EAAwC,OAAxC,CAA3C;AACA,SAAKlC,IAAL,GAAYA,IAAZ;AACA,SAAKmC,UAAL,GAAmBV,OAAO,IAAIA,OAAO,CAACU,UAApB,IAAmC,KAArD;AACA,SAAKC,aAAL,GAAsBX,OAAO,IAAIA,OAAO,CAACY,QAAnB,IAA+BZ,OAAO,CAACW,aAAxC,IAA0DvC,QAAQ,CAACyC,mBAAT,CAA6B/B,IAA5G;AACA,SAAKgC,SAAL,GAAkBd,OAAO,IAAI,KAAKW,aAAL,KAAuBvC,QAAQ,CAACyC,mBAAT,CAA6B/B,IAA/D,IAAuEkB,OAAO,CAACc,SAAhF,IAA8F,CAAC,CAAhH;AACA,SAAKF,QAAL,GAAiBZ,OAAO,IAAIA,OAAO,CAACY,QAApB,IAAiC,KAAjD;AACA,SAAKG,OAAL,GAAef,OAAO,IAAI,OAAOA,OAAO,CAACe,OAAf,KAA2B,SAAtC,GAAkDf,OAAO,CAACe,OAA1D,GAAoE,IAAnF;AACA,SAAKd,MAAL,GACID,OAAO,IAAIA,OAAO,CAACgB,UAAR,KAAuB,IAAlC,GACM1C,WAAW,CAACC,IAAD,CADjB,GAEM;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBE,MAAAA,QAAQ,EAAEN,QAAQ,CAACS,gBAAT,CAA0BC,IAApD;AAA0DL,MAAAA,SAAS,EAAE;AAArE,KAHV;AAIA,SAAKuC,UAAL,GAAmBhB,OAAO,IAAIA,OAAO,CAACgB,UAApB,IAAmC,KAArD;AACA,SAAKf,MAAL,CAAYxB,SAAZ,GAAwB,KAAKA,SAA7B;AACH;;AACDsB,EAAAA,WAAW,CAACkB,iBAAZ,GAAgC,UAAUC,MAAV,EAAkB;AAC9C,QAAIC,UAAU,GAAGD,MAAM,CAACjB,MAAP,CAActB,IAA/B;AACA,QAAIyC,cAAc,GAAGF,MAAM,CAACjB,MAAP,CAAczB,QAAd,CAAuB,CAAvB,CAArB;;AACA,QAAI0C,MAAM,CAACd,QAAP,KAAoBhC,QAAQ,CAACiC,cAAT,CAAwBgB,OAAhD,EAAyD;AACrDF,MAAAA,UAAU,GAAGG,UAAU,CAACH,UAAD,CAAV,CAAuBI,QAAvB,EAAb;AACAH,MAAAA,cAAc,GAAGE,UAAU,CAACF,cAAD,CAAV,CAA2BG,QAA3B,EAAjB;AACH,KAHD,MAIK,IAAIL,MAAM,CAACd,QAAP,KAAoBhC,QAAQ,CAACiC,cAAT,CAAwBmB,OAAhD,EAAyD;AAC1DL,MAAAA,UAAU,GAAG,CAACA,UAAU,KAAK,MAAhB,EAAwBI,QAAxB,EAAb;AACAH,MAAAA,cAAc,GAAG,EAAjB;AACH;;AACD,WAAO;AACH7C,MAAAA,IAAI,EAAE2C,MAAM,CAAC3C,IADV;AAEHC,MAAAA,QAAQ,EAAE,CAAC4C,cAAD,CAFP;AAGH3C,MAAAA,SAAS,EAAE,IAHR;AAIHC,MAAAA,QAAQ,EAAEwC,MAAM,CAACjB,MAAP,CAAcvB,QAAd,IAA0BN,QAAQ,CAACS,gBAAT,CAA0B4C,IAJ3D;AAKH9C,MAAAA,IAAI,EAAEwC;AALH,KAAP;AAOH,GAlBD;;AAmBApB,EAAAA,WAAW,CAAC2B,YAAZ,GAA2B,UAAUR,MAAV,EAAkB;AACzC,YAAQA,MAAM,CAACd,QAAf;AACI,WAAKhC,QAAQ,CAACiC,cAAT,CAAwBC,MAA7B;AACI,eAAOhB,eAAP;;AACJ,WAAKlB,QAAQ,CAACiC,cAAT,CAAwBgB,OAA7B;AACA,WAAKjD,QAAQ,CAACiC,cAAT,CAAwBsB,IAA7B;AACA,WAAKvD,QAAQ,CAACiC,cAAT,CAAwBuB,QAA7B;AACA,WAAKxD,QAAQ,CAACiC,cAAT,CAAwBwB,WAA7B;AACI,eAAOjD,gBAAP;;AACJ,WAAKR,QAAQ,CAACiC,cAAT,CAAwBmB,OAA7B;AACI,eAAO1B,gBAAP;;AACJ;AACI,eAAO,EAAP;AAXR;AAaH,GAdD;;AAeAC,EAAAA,WAAW,CAAC+B,eAAZ,GAA8B,UAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,SAA/B,EAA0C;AACpE,QAAIf,MAAM,GAAGc,OAAO,CAACE,IAAR,CAAa,UAAUC,CAAV,EAAa;AAAE,aAAOA,CAAC,CAAC5D,IAAF,KAAWwD,UAAlB;AAA+B,KAA3D,CAAb;;AACA,QAAI,CAACb,MAAL,EAAa;AACT;AACH;;AACDA,IAAAA,MAAM,CAACP,aAAP,GACIO,MAAM,CAACP,aAAP,KAAyBvC,QAAQ,CAACyC,mBAAT,CAA6B/B,IAAtD,GACMV,QAAQ,CAACyC,mBAAT,CAA6BuB,SADnC,GAEMlB,MAAM,CAACP,aAAP,KAAyBvC,QAAQ,CAACyC,mBAAT,CAA6BuB,SAAtD,GACIhE,QAAQ,CAACyC,mBAAT,CAA6BwB,UADjC,GAEIjE,QAAQ,CAACyC,mBAAT,CAA6B/B,IAL3C;AAMAoC,IAAAA,MAAM,CAACJ,SAAP,GAAmBI,MAAM,CAACP,aAAP,KAAyBvC,QAAQ,CAACyC,mBAAT,CAA6B/B,IAAtD,GAA6D,CAAC,CAA9D,GAAkEwD,MAAM,CAACC,SAA5F;;AACA,QAAI,CAACN,SAAL,EAAgB;AACZD,MAAAA,OAAO,CACF/B,MADL,CACY,UAAUuC,GAAV,EAAe;AAAE,eAAOA,GAAG,CAACjE,IAAJ,KAAawD,UAApB;AAAiC,OAD9D,EAEKU,OAFL,CAEa,UAAUN,CAAV,EAAa;AACtBA,QAAAA,CAAC,CAACrB,SAAF,GAAc,CAAC,CAAf;AACAqB,QAAAA,CAAC,CAACxB,aAAF,GAAkBvC,QAAQ,CAACyC,mBAAT,CAA6B/B,IAA/C;AACH,OALD;AAMH;;AACDkD,IAAAA,OAAO,CACF/B,MADL,CACY,UAAUuC,GAAV,EAAe;AAAE,aAAOA,GAAG,CAAC1B,SAAJ,GAAgB,CAAvB;AAA2B,KADxD,EAEK4B,IAFL,CAEU,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtB,aAAOD,CAAC,CAAC7B,SAAF,KAAgB8B,CAAC,CAAC9B,SAAlB,GAA8B,CAA9B,GAAkC6B,CAAC,CAAC7B,SAAF,GAAc8B,CAAC,CAAC9B,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAA1E;AACH,KAJD,EAKK2B,OALL,CAKa,UAAUD,GAAV,EAAeK,CAAf,EAAkB;AAC3BL,MAAAA,GAAG,CAAC1B,SAAJ,GAAgB+B,CAAC,GAAG,CAApB;AACH,KAPD;AAQA,WAAOb,OAAP;AACH,GA7BD;;AA8BAjC,EAAAA,WAAW,CAAC+C,gBAAZ,GAA+B,YAAY;AACvC,WAAO;AACHtE,MAAAA,QAAQ,EAAE,CAAC,EAAD,CADP;AAEHC,MAAAA,SAAS,EAAE,KAFR;AAGHC,MAAAA,QAAQ,EAAEN,QAAQ,CAACS,gBAAT,CAA0BC,IAHjC;AAIHH,MAAAA,IAAI,EAAE;AAJH,KAAP;AAMH,GAPD;;AAQA,SAAOoB,WAAP;AACH,CA7FgC,EAAjC;;AA8FA7B,OAAO,CAAC6E,OAAR,GAAkBhD,WAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Column_1 = require(\"./Column\");\nfunction filterProps(name) {\n    return {\n        argument: [],\n        hasFilter: false,\n        name: name,\n        operator: 'None',\n        text: null,\n    };\n}\nvar NumericOperators = [\n    { value: Column_1.CompareOperators.None, title: 'None' },\n    { value: Column_1.CompareOperators.Equals, title: 'Equals' },\n    { value: Column_1.CompareOperators.Between, title: 'Between' },\n    { value: Column_1.CompareOperators.Gte, title: '>=' },\n    { value: Column_1.CompareOperators.Gt, title: '>' },\n    { value: Column_1.CompareOperators.Lte, title: '<=' },\n    { value: Column_1.CompareOperators.Lt, title: '<' },\n];\nvar StringOperators = [\n    { value: Column_1.CompareOperators.None, title: 'None' },\n    { value: Column_1.CompareOperators.Equals, title: 'Equals' },\n    { value: Column_1.CompareOperators.NotEquals, title: 'Not Equals' },\n    { value: Column_1.CompareOperators.Contains, title: 'Contains' },\n    { value: Column_1.CompareOperators.NotContains, title: 'Not Contains' },\n    { value: Column_1.CompareOperators.StartsWith, title: 'Starts With' },\n    { value: Column_1.CompareOperators.NotStartsWith, title: 'Not Starts With' },\n    { value: Column_1.CompareOperators.EndsWith, title: 'Ends With' },\n    { value: Column_1.CompareOperators.NotEndsWith, title: 'Not Ends With' },\n];\nvar BooleanOperators = [\n    { value: Column_1.CompareOperators.None, title: 'None' },\n    { value: Column_1.CompareOperators.Equals, title: 'Equals' },\n    { value: Column_1.CompareOperators.NotEquals, title: 'Not Equals' },\n];\nvar ColumnModel = /** @class */ (function () {\n    function ColumnModel(name, options) {\n        this.hasFilter = this.filter && (this.filter.text || this.filter.argument) && this.filter.operator !== Column_1.CompareOperators.None;\n        this.aggregate = (options && options.aggregate) || Column_1.AggregateFunctions.None;\n        this.dataType = (options && options.dataType) || Column_1.ColumnDataType.String;\n        this.isKey = (options && options.isKey) || false;\n        this.label = (options && options.label) || (name || '').replace(/([a-z])([A-Z])/g, '$1 $2');\n        this.name = name;\n        this.searchable = (options && options.searchable) || false;\n        this.sortDirection = (options && options.sortable && options.sortDirection) || Column_1.ColumnSortDirection.None;\n        this.sortOrder = (options && this.sortDirection !== Column_1.ColumnSortDirection.None && options.sortOrder) || -1;\n        this.sortable = (options && options.sortable) || false;\n        this.visible = options && typeof options.visible === 'boolean' ? options.visible : true;\n        this.filter =\n            options && options.filterable === true\n                ? filterProps(name)\n                : { argument: [], operator: Column_1.CompareOperators.None, hasFilter: false };\n        this.filterable = (options && options.filterable) || false;\n        this.filter.hasFilter = this.hasFilter;\n    }\n    ColumnModel.createFilterPatch = function (column) {\n        var filterText = column.filter.text;\n        var filterArgument = column.filter.argument[0];\n        if (column.dataType === Column_1.ColumnDataType.Numeric) {\n            filterText = parseFloat(filterText).toString();\n            filterArgument = parseFloat(filterArgument).toString();\n        }\n        else if (column.dataType === Column_1.ColumnDataType.Boolean) {\n            filterText = (filterText === 'true').toString();\n            filterArgument = '';\n        }\n        return {\n            name: column.name,\n            argument: [filterArgument],\n            hasFilter: true,\n            operator: column.filter.operator || Column_1.CompareOperators.Auto,\n            text: filterText,\n        };\n    };\n    ColumnModel.getOperators = function (column) {\n        switch (column.dataType) {\n            case Column_1.ColumnDataType.String:\n                return StringOperators;\n            case Column_1.ColumnDataType.Numeric:\n            case Column_1.ColumnDataType.Date:\n            case Column_1.ColumnDataType.DateTime:\n            case Column_1.ColumnDataType.DateTimeUtc:\n                return NumericOperators;\n            case Column_1.ColumnDataType.Boolean:\n                return BooleanOperators;\n            default:\n                return [];\n        }\n    };\n    ColumnModel.sortColumnArray = function (columnName, columns, multiSort) {\n        var column = columns.find(function (c) { return c.name === columnName; });\n        if (!column) {\n            return;\n        }\n        column.sortDirection =\n            column.sortDirection === Column_1.ColumnSortDirection.None\n                ? Column_1.ColumnSortDirection.Ascending\n                : column.sortDirection === Column_1.ColumnSortDirection.Ascending\n                    ? Column_1.ColumnSortDirection.Descending\n                    : Column_1.ColumnSortDirection.None;\n        column.sortOrder = column.sortDirection === Column_1.ColumnSortDirection.None ? -1 : Number.MAX_VALUE;\n        if (!multiSort) {\n            columns\n                .filter(function (col) { return col.name !== columnName; })\n                .forEach(function (c) {\n                c.sortOrder = -1;\n                c.sortDirection = Column_1.ColumnSortDirection.None;\n            });\n        }\n        columns\n            .filter(function (col) { return col.sortOrder > 0; })\n            .sort(function (a, b) {\n            return a.sortOrder === b.sortOrder ? 0 : a.sortOrder > b.sortOrder ? 1 : -1;\n        })\n            .forEach(function (col, i) {\n            col.sortOrder = i + 1;\n        });\n        return columns;\n    };\n    ColumnModel.clearFilterPatch = function () {\n        return {\n            argument: [''],\n            hasFilter: false,\n            operator: Column_1.CompareOperators.None,\n            text: '',\n        };\n    };\n    return ColumnModel;\n}());\nexports.default = ColumnModel;\n"]},"metadata":{},"sourceType":"script"}