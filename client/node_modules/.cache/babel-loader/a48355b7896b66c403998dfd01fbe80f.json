{"ast":null,"code":"import _slicedToArray from \"/home/chairchandler/Desktop/Bazy Danych/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGrid } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function SQLTable(props) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(props.headers),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        headers = _React$useState2[0],\n        setHeaders = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.rows),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rows = _React$useState4[0],\n        setRows = _React$useState4[1]; //const [selectedRows, setSelectedRows] = React.useState(new Set())\n\n\n  let convHeaders = headers.map(({\n    header,\n    label\n  }, colnum) => new ColumnModel(header, {\n    isKey: !colnum,\n    sortable: true,\n    filterable: true\n  }));\n\n  const _React$useState5 = React.useState(convHeaders),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        columns = _React$useState6[0],\n        setColumns = _React$useState6[1];\n\n  return React.createElement(DataGrid, {\n    columns: columns,\n    dataSource: rows,\n    gridName: props.title,\n    onRowClick: row => alert(JSON.stringify(row)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, () => {\n    alert(1);\n    return null;\n  }, React.createElement(IconButton, {\n    onClick: () => alert('I can help you to add features to your datagrid.'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, () => {\n    alert(1);\n    return React.createElement(AddOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }));\n}\n/*\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\n*/\n\n/*function onSelectRow(rownum) {\n    if(selectedRows.has(rownum)) {\n      selectedRows.delete(rownum)\n    } else {\n      selectedRows.add(rownum)\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  function onSelectAllRows() {\n    if(selectedRows.size) {\n      selectedRows.clear()\n    } else {\n      rows.forEach((val, indx) => {\n        selectedRows.add(indx)\n      })\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n      <Typography>123</Typography>\n        <Table stickyHeader aria-label=\"sticky table\" size='small' padding='checkbox'>\n          <TableHead>\n            <TableRow>\n              {headers.map(({header, label}, colnum) => (\n                <TableCell\n                  key={headers}\n                  align='center'\n                >\n\n                  {!colnum && \n                  (<Checkbox\n                  indeterminate={selectedRows.size > 0 && selectedRows.size < rows.length}\n                  checked={selectedRows.size === rows.length}\n                  onChange={onSelectAllRows}\n                  style={{float: \"left\"}}\n                  inputProps={{ 'aria-label': 'select all desserts' }}\n                  />)}\n                  \n                  <span style={{'fontWeight': 'bold'}}>{label}</span>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rownum) => (\n                <TableRow hover role=\"checkbox\">\n                  {headers.map(({header}, colnum) => (\n                      <TableCell align='center'>\n\n                        {!colnum && \n                        (<Checkbox\n                        checked={selectedRows.has(rownum)}\n                        onChange={onSelectRow.bind(this, rownum)}\n                        style={{float: \"left\"}}\n                        />)}\n\n                        {row[header]}\n                      </TableCell>\n                    ))\n                  }\n                </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );*/","map":{"version":3,"sources":["/home/chairchandler/Desktop/Bazy Danych/client/src/Shared/SQLTable.js"],"names":["React","makeStyles","DataGrid","ColumnModel","IconButton","AddOutlinedIcon","useStyles","root","width","container","maxHeight","SQLTable","props","classes","useState","headers","setHeaders","rows","setRows","convHeaders","map","header","label","colnum","isKey","sortable","filterable","columns","setColumns","title","row","alert","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC;AAC3BM,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GADqB;AAI3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AAJgB,CAAD,CAA5B;AASA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,QAAMC,OAAO,GAAGP,SAAS,EAAzB;;AADsC,0BAERN,KAAK,CAACc,QAAN,CAAeF,KAAK,CAACG,OAArB,CAFQ;AAAA;AAAA,QAE/BA,OAF+B;AAAA,QAEtBC,UAFsB;;AAAA,2BAGdhB,KAAK,CAACc,QAAN,CAAeF,KAAK,CAACK,IAArB,CAHc;AAAA;AAAA,QAG/BA,IAH+B;AAAA,QAGzBC,OAHyB,wBAKtC;;;AAEA,MAAIC,WAAW,GAAGJ,OAAO,CAACK,GAAR,CAAY,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,EAAkBC,MAAlB,KAC5B,IAAIpB,WAAJ,CAAgBkB,MAAhB,EAAwB;AACtBG,IAAAA,KAAK,EAAE,CAACD,MADc;AAEtBE,IAAAA,QAAQ,EAAE,IAFY;AAGtBC,IAAAA,UAAU,EAAE;AAHU,GAAxB,CADgB,CAAlB;;AAPsC,2BAeR1B,KAAK,CAACc,QAAN,CAAeK,WAAf,CAfQ;AAAA;AAAA,QAe/BQ,OAf+B;AAAA,QAetBC,UAfsB;;AAiBtC,SACE,oBAAC,QAAD;AACA,IAAA,OAAO,EAAED,OADT;AAEA,IAAA,UAAU,EAAEV,IAFZ;AAGA,IAAA,QAAQ,EAAEL,KAAK,CAACiB,KAHhB;AAIA,IAAA,UAAU,EAAGC,GAAD,IAASC,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAD,CAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,MAAI;AAACC,IAAAA,KAAK,CAAC,CAAD,CAAL;AAAU,WAAO,IAAP;AAAa,GAN/B,EAOE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMA,KAAK,CAAC,kDAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,MAAI;AAACA,IAAAA,KAAK,CAAC,CAAD,CAAL;AAAU,WAAQ,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAA4B,GADhD,CAPF,CADF;AAcD;AAED;;;;;;;;;;;;AAYA","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGrid } from 'tubular-react';\nimport { ColumnModel } from 'tubular-common';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function SQLTable(props) {\n  const classes = useStyles();\n  const [headers, setHeaders] = React.useState(props.headers)\n  const [rows, setRows] = React.useState(props.rows)\n  \n  //const [selectedRows, setSelectedRows] = React.useState(new Set())\n  \n  let convHeaders = headers.map(({header, label}, colnum) => \n    new ColumnModel(header, {\n      isKey: !colnum,\n      sortable: true,\n      filterable: true\n    }))\n  \n  \n  const [columns, setColumns] = React.useState(convHeaders)\n\n  return (\n    <DataGrid\n    columns={columns}\n    dataSource={rows}\n    gridName={props.title}\n    onRowClick={(row) => alert(JSON.stringify(row))}\n   >\n      {()=>{alert(1); return null;}}\n      <IconButton onClick={() => alert('I can help you to add features to your datagrid.')}>\n          {()=>{alert(1); return (<AddOutlinedIcon/>)}}\n      </IconButton>\n\n   </DataGrid>\n  )\n}\n\n/*\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\n*/\n\n/*function onSelectRow(rownum) {\n    if(selectedRows.has(rownum)) {\n      selectedRows.delete(rownum)\n    } else {\n      selectedRows.add(rownum)\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  function onSelectAllRows() {\n    if(selectedRows.size) {\n      selectedRows.clear()\n    } else {\n      rows.forEach((val, indx) => {\n        selectedRows.add(indx)\n      })\n    }\n    let state = new Set(selectedRows)\n    setSelectedRows(state)\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n      <Typography>123</Typography>\n        <Table stickyHeader aria-label=\"sticky table\" size='small' padding='checkbox'>\n          <TableHead>\n            <TableRow>\n              {headers.map(({header, label}, colnum) => (\n                <TableCell\n                  key={headers}\n                  align='center'\n                >\n\n                  {!colnum && \n                  (<Checkbox\n                  indeterminate={selectedRows.size > 0 && selectedRows.size < rows.length}\n                  checked={selectedRows.size === rows.length}\n                  onChange={onSelectAllRows}\n                  style={{float: \"left\"}}\n                  inputProps={{ 'aria-label': 'select all desserts' }}\n                  />)}\n                  \n                  <span style={{'fontWeight': 'bold'}}>{label}</span>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rownum) => (\n                <TableRow hover role=\"checkbox\">\n                  {headers.map(({header}, colnum) => (\n                      <TableCell align='center'>\n\n                        {!colnum && \n                        (<Checkbox\n                        checked={selectedRows.has(rownum)}\n                        onChange={onSelectRow.bind(this, rownum)}\n                        style={{float: \"left\"}}\n                        />)}\n\n                        {row[header]}\n                      </TableCell>\n                    ))\n                  }\n                </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );*/"]},"metadata":{},"sourceType":"module"}